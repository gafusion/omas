
waves
^^^^^

.. raw:: html

   <table border=1, width='100%'>
   <tr><th style="width:25%">Path</th><th style="width:25%">Dimensions</th><th>Type</th><th>Units</th><th>Description</th></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p></p></td><td><p></p></td><td><p>RF wave propagation and deposition. Note that current estimates in this IDS are a priori not taking into account synergies between multiple sources (a convergence loop with Fokker-Planck calculations is required to account for such synergies) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Generic decription of the code-specific parameters for the code that has produced this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.library</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of external libraries used by the code that has produced this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.library[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.library[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.library[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.library[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.library[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.library[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software generating IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.output_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.time]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Output flag : 0 means the run is successful, other values mean some difficulty has been encountered, the exact meaning is then code specific. Negative values mean the result shall not be used.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.code.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Wave description for each frequency</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Beam tracing calculations, for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of rays/beams describing the wave propagation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Electric field polarization of the ray/beam along its path</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.minus</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Right hand polarised electric field component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.minus.imaginary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Imaginary part</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.minus.real</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Real part</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Parallel to magnetic field polarised electric field component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.parallel.imaginary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Imaginary part</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.parallel.real</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Real part</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.plus</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Left hand polarised electric field component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.plus.imaginary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Imaginary part</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].e_field.plus.real</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Real part</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].electrons.power</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Power absorbed along the beam by the species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].element[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].element[:].atoms_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].element[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying the species (e.g. H+, D+, T+, He+2, C+, D2, DT, CD4, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple state calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].power</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Power absorbed along the beam by the species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Collisional exchange with the various states of the ion species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying charge state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].state[:].power</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Power absorbed along the beam by the species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle (equal to z_min if no bundle)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle (z_min = z_max = 0 for a neutral)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].beam_tracing[:].beam[:].length</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Ray/beam curvilinear length</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].phase</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Phase ellipse characteristics</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].phase.angle</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>rad</p></td><td><p>Rotation angle for the phase ellipse</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].phase.curvature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...2,<br> waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-1</p></td><td><p>Inverse curvature radii for the phase ellipse, positive/negative for divergent/convergent beams, in the horizontal direction (first index of the first coordinate) and in the vertical direction (second index of the first coordinate)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].position</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Position of the ray/beam along its path</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].position.phi</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>rad</p></td><td><p>Toroidal angle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].position.psi</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Wb</p></td><td><p>Poloidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].position.r</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Major radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].position.theta</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>rad</p></td><td><p>Poloidal angle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].position.z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Height</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].power_flow_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Normalised power flow</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].power_flow_norm.parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalized power flow in the direction parallel to the magnetic field</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].power_flow_norm.perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalized power flow in the direction perpendicular to the magnetic field</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].power_initial</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>W</p></td><td><p>Initial power in the ray/beam</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].spot</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Spot ellipse characteristics</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].spot.angle</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>rad</p></td><td><p>Rotation angle for the spot ellipse</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].spot.size</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...2,<br> waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m</p></td><td><p>Size of the spot ellipse: distance between the central ray and the peripheral rays in the horizontal (first index of the first coordinate) and vertical direction (second index of the first coordinate)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Wave vector of the ray/beam along its path</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.k_r</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-1</p></td><td><p>Wave vector component in the major radius direction</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.k_r_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalized wave vector component in the major radius direction = k_r / norm(k)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.k_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-1</p></td><td><p>Wave vector component in the toroidal direction</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.k_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalized wave vector component in the toroidal direction = k_tor / norm(k)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.k_z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-1</p></td><td><p>Wave vector component in the vertical direction</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.k_z_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalized wave vector component in the vertical direction = k_z / norm(k)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.n_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Parallel refractive index</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.n_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Perpendicular refractive index</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[coherent_wave[:].beam_tracing[:].beam[:].length]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Toroidal wave number, contains a single value if varying_ntor = 0 to avoid useless repetition constant values. The wave vector toroidal component is defined as k_tor = n_tor grad phi where phi is the toroidal angle so that a positive n_tor means a wave propagating in the positive phi direction</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].beam_tracing[:].beam[:].wave_vector.varying_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Flag telling whether n_tor is constant along the ray path (0) or varying (1)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].beam_tracing[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Solution by a full wave code, given on a generic grid description, for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Components of the wave magnetic field, , represented as Fourier coefficients B(n_tor,frequency) such that the electric is equal to real(B(n_tor,frequency).exp(i(n_tor.phi - 2.pi.frequency.t)))</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.bi_normal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>T</p></td><td><p>Magnitude of perpendicular (to the static magnetic field) wave magnetic field tangent to a flux surface, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.bi_normal[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].b_field.bi_normal[:].values,<br> 1...N]</p></td><td><p>CPX_2D (uncertain)</p></td><td><p>T</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.bi_normal[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.bi_normal[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].b_field.bi_normal[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>CPX_1D (uncertain)</p></td><td><p>T</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.normal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>T</p></td><td><p>Magnitude of wave magnetic field normal to a flux surface, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.normal[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].b_field.normal[:].values,<br> 1...N]</p></td><td><p>CPX_2D (uncertain)</p></td><td><p>T</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.normal[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.normal[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].b_field.normal[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>CPX_1D (uncertain)</p></td><td><p>T</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>T</p></td><td><p>Parallel (to the static magnetic field) component of the wave magnetic field, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.parallel[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].b_field.parallel[:].values,<br> 1...N]</p></td><td><p>CPX_2D (uncertain)</p></td><td><p>T</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.parallel[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].b_field.parallel[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].b_field.parallel[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>CPX_1D (uncertain)</p></td><td><p>T</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Components of the wave electric field, represented as Fourier coefficients E(n_tor,frequency) such that the electric is equal to real(E(n_tor,frequency).exp(i(n_tor.phi - 2.pi.frequency.t)))</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.bi_normal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>V.m^-1</p></td><td><p>Magnitude of perpendicular (to the static magnetic field) wave electric field tangent to a flux surface, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.bi_normal[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].e_field.bi_normal[:].values,<br> 1...N]</p></td><td><p>CPX_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.bi_normal[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.bi_normal[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].e_field.bi_normal[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>CPX_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.minus</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>V.m^-1</p></td><td><p>Right hand circularly polarised component of the perpendicular (to the static magnetic field) electric field, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.minus[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].e_field.minus[:].values,<br> 1...N]</p></td><td><p>CPX_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.minus[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.minus[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].e_field.minus[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>CPX_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.normal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>V.m^-1</p></td><td><p>Magnitude of wave electric field normal to a flux surface, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.normal[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].e_field.normal[:].values,<br> 1...N]</p></td><td><p>CPX_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.normal[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.normal[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].e_field.normal[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>CPX_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>V.m^-1</p></td><td><p>Parallel (to the static magnetic field) component of electric field, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.parallel[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].e_field.parallel[:].values,<br> 1...N]</p></td><td><p>CPX_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.parallel[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.parallel[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].e_field.parallel[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>CPX_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.plus</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>V.m^-1</p></td><td><p>Left hand circularly polarised component of the perpendicular (to the static magnetic field) electric field, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.plus[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].e_field.plus[:].values,<br> 1...N]</p></td><td><p>CPX_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.plus[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].e_field.plus[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].e_field.plus[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>CPX_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Grid description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].base</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of bases for the grid subset. For each base, the structure describes the projection of the base vectors on the canonical frame of the grid.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].base[:].jacobian</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Metric Jacobian</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].base[:].tensor_contravariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Contravariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].base[:].tensor_covariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Covariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Space dimension of the grid subset elements, using the convention 1=nodes, 2=edges, 3=faces, 4=cells/volumes</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of elements defining the grid subset. An element is defined by a combination of objects from potentially all spaces</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element[:].object</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of objects defining the element</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element[:].object[:].dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Dimension of the object - using the convention  1=nodes, 2=edges, 3=faces, 4=cells/volumes</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element[:].object[:].index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Object index</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element[:].object[:].space</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the space from which that object is taken</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Grid subset identifier<br>0) unspecified : unspecified<br>1) nodes : All nodes (0D) belonging to the associated spaces, implicit declaration (no need to replicate the grid elements in the grid_subset structure). In case of a structured grid represented with multiple 1D spaces, the order of the implicit elements in the grid_subset follows Fortran ordering, i.e. iterate always on nodes of the first space first, then move to the second node of the second space, ... : [((s1_1 to s1_end), s2_1, s3_1 ... sN_1), (((s1_1 to s1_end), s2_2, s3_1, ... sN_1)), ... ((s1_1 to s1_end), s2_end, s3_end ... sN_end)]<br>2) edges : All edges (1D) belonging to the associated spaces, implicit declaration (no need to replicate the grid elements in the grid_subset structure)<br>3) x_aligned_edges : All x-aligned (poloidally) aligned edges belonging to the associated spaces<br>4) y_aligned_edges : All y-aligned (radially) aligned edges belonging to the associated spaces<br>5) cells : All cells (2D) belonging to the associated spaces, implicit declaration (no need to replicate the grid elements in the grid_subset structure)<br>6) x_points : Nodes defining x-points<br>7) core_cut : y-aligned edges inside the separatrix connecting to the active x-point<br>8) PFR_cut : y-aligned edges in the private flux region connecting to the active x-point<br>9) outer_throat : y-aligned edges in the outer SOL connecting to the active x-point<br>10) inner_throat : y-aligned edges in the inner SOL connecting to the active x-point<br>11) outer_midplane : y-aligned edges connecting to the node closest to outer midplane on the separatrix<br>12) inner_midplane : y-aligned edges connecting to the node closest to inner midplane on the separatrix<br>13) outer_target : y-aligned edges defining the outer target<br>14) inner_target : y-aligned edges defining the inner target<br>15) core_boundary : Innermost x-aligned edges<br>16) separatrix : x-aligned edges defining the active separatrix<br>17) main_chamber_wall : x-aligned edges defining main chamber wall outside of the divertor regions<br>18) outer_baffle : x-aligned edges defining the chamber wall of the outer active divertor region<br>19) inner_baffle : x-aligned edges defining the chamber wall of the inner active divertor region<br>20) outer_PFR_wall : x-aligned edges defining the private flux region wall of the outer active divertor region<br>21) inner_PFR_wall : x-aligned edges defining the private flux region wall of the inner active divertor region<br>22) core : Cells inside the active separatrix<br>23) sol : Cells defining the main SOL outside of the divertor regions<br>24) outer_divertor : Cells defining the outer divertor region<br>25) inner_divertor : Cells defining the inner divertor region<br>26) core_sol : x-aligned edges defining part of active separatrix separating core and sol<br>27) full_main_chamber_wall : main_chamber_wall + outer_baffle(s) + inner_baffle(s)<br>28) full_PFR_wall : outer_PFR__wall(s) + inner_PFR_wall(s)<br>29) core_cut_X2 : y-aligned edges inside the separatrix connecting to the non-active x-point<br>30) PFR_cut_X2 : y-aligned edges in the private flux region connecting to the non-active x-point<br>31) outer_throat_X2 : y-aligned edges in the outer SOL connecting to the non-active x-point<br>32) inner_throat_X2 : y-aligned edges in the inner SOL connecting to the non-active x-point<br>33) separatrix_2 : x-aligned edges defining the non-active separatrix<br>34) outer_baffle_2 : x-aligned edges defining the chamber wall of the outer non-active divertor region<br>35) inner_baffle_2 : x-aligned edges defining the chamber wall of the inner non-active divertor region<br>36) outer_PFR_wall_2 : x-aligned edges defining the private flux region wall of the outer non-active divertor region<br>37) inner_PFR_wall_2 : x-aligned edges defining the private flux region wall of the inner non-active divertor region<br>38) intra_sep : Cells between the two separatrices<br>39) outer_divertor_2 : Cells defining the outer inactive divertor region<br>40) inner_divertor_2 : Cells defining the inner inactive divertor region<br>41) outer_target_2 : y-aligned edges defining the outer inactive target<br>42) inner_target_2 : y-aligned edges defining the inner inactive target<br>43) volumes : All volumes (3D) belonging to the associated spaces, implicit declaration (no need to replicate the grid elements in the grid_subset structure)<br>44) full_wall : All edges defining walls, baffles, and targets<br>45) outer_sf_leg_entrance_1 : y-aligned edges defining the SOL entrance of the first snowflake outer leg<br>46) outer_sf_leg_entrance_2 : y-aligned edges defining the SOL entrance of the third snowflake outer leg<br>47) outer_sf_pfr_connection_1 : y-aligned edges defining the connection between the outer snowflake entrance and third leg<br>48) outer_sf_pfr_connection_2 : y-aligned edges defining the connection between the outer snowflake first and second leg<br>100) magnetic_axis : Point corresponding to the magnetic axis<br>101) outer_mid_plane_separatrix : Point on active separatrix at outer mid-plane<br>102) inner_mid_plane_separatrix : Point on active separatrix at inner mid-plane<br>103) outer_target_separatrix : Point on active separatrix at outer active target<br>104) inner_target_separatrix : Point on active separatrix at inner active target<br>105) outer_target_separatrix_2 : Point on non-active separatrix at outer non-active target<br>106) inner_target_separatrix_2 : Point on non-active separatrix at inner non-active target</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].metric</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Metric of the canonical frame onto Cartesian coordinates</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].metric.jacobian</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Metric Jacobian</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].metric.tensor_contravariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Contravariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].metric.tensor_covariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].grid.grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Covariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Grid identifier<br>0) unspecified : unspecified<br>1) linear : Linear<br>2) cylinder : Cylindrical geometry (straight in axial direction)<br>3) limiter : Limiter<br>4) SN : Single null<br>5) CDN : Connected double null<br>6) DDN_bottom : Disconnected double null with inner X-point below the midplane<br>7) DDN_top : Disconnected double null with inner X-point above the midplane<br>8) annulus : Annular geometry (not necessarily with straight axis)<br>9) stellarator_island : Stellarator island geometry<br>10) structured_spaces : Structured grid represented with multiple spaces of dimension 1<br>11) LFS_snowflake_minus : Snowflake grid with secondary x point on the low field side, and the secondary separatrix on top of the primary<br>12) LFS_snowflake_plus : Snowflake grid with secondary x point to the right of the primary, and the secondary separatrix below the primary<br>100) reference : Refers to a GGD described in another IDS indicated by grid_path. In such a case, do not fill the grid_ggd node of this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the grid, including the IDS name, in case of implicit reference to a grid_ggd node described in another IDS. To be filled only if the grid is not described explicitly in this grid_ggd structure. Example syntax: 'wall:0/description_ggd(1)/grid_ggd', means that the grid is located in the wall IDS, occurrence 0, with ids path 'description_ggd(1)/grid_ggd'. See the link below for more details about IDS paths</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of grid spaces</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].coordinates_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Type of coordinates describing the physical space, for every coordinate of the space. The size of this node therefore defines the dimension of the space. The meaning of these predefined integer constants can be found in the Data Dictionary under utilities/coordinate_identifier.xml</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].geometry_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Type of space geometry (0: standard, 1:Fourier, >1: Fourier with periodicity)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].geometry_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].geometry_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].geometry_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Space identifier<br>0) unspecified : unspecified<br>1) primary_standard : Primary space defining the standard grid<br>2) primary_staggered : Primary space defining a grid staggered with respect to the primary standard space<br>3) secondary_structured : Secondary space defining additional dimensions that extend the primary standard space in a structured way</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Definition of the space objects for every dimension (from one to the dimension of the highest-dimensional objects). The index correspond to 1=nodes, 2=edges, 3=faces, 4=cells/volumes, .... For every index, a collection of objects of that dimension is described.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].geometry_content</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Content of the ../object/geometry node for this dimension<br>0) unspecified : unspecified<br>1) node_coordinates : For nodes : node coordinates<br>11) node_coordinates_connection : For nodes : node coordinates, then connection length, and distance in the poloidal plane to the nearest solid surface outside the separatrix<br>21) edge_areas : For edges : contains 3 surface areas after uniform extension in the third dimension of the edges. Geometry(1) and geometry(2) are the projections of that area along the local poloidal and radial coordinate respectively. Geometry(3) is the full surface area of the extended edge<br>31) face_indices_volume : For faces : coordinates indices (ix, iy) of the face within the structured grid of the code. The third element contains the volume after uniform extension in the third dimension of the faces<br>32) face_indices_volume_connection : For faces : coordinates indices (ix, iy) of the face within the structured grid of the code. The third element contains the volume after uniform extension in the third dimension of the faces. The fourth element is the connection length. The fifth element is the distance in the poloidal plane to the nearest solid surface outside the separatrix</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].geometry_content.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].geometry_content.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].geometry_content.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].object</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of objects for a given dimension</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].object[:].boundary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of  (n-1)-dimensional objects defining the boundary of this n-dimensional object</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].object[:].boundary[:].index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of this (n-1)-dimensional boundary object</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].object[:].boundary[:].neighbours</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>List of indices of the n-dimensional objects adjacent to the given n-dimensional object. An object can possibly have multiple neighbours on a boundary</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].object[:].geometry</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Geometry data associated with the object, its detailed content is defined by ../../geometry_content. Its dimension depends on the type of object, geometry and coordinate considered. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].object[:].geometry_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>2D geometry data associated with the object. Its dimension depends on the type of object, geometry and coordinate considered. Typically, the first dimension represents the object coordinates, while the second dimension would represent the values of the various degrees of freedom of the finite element attached to the object.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].object[:].measure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>m^dimension</p></td><td><p>Measure of the space object, i.e. physical size (length for 1d, area for 2d, volume for 3d objects,...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].grid.space[:].objects_per_dimension[:].object[:].nodes</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>List of nodes forming this object (indices to objects_per_dimension(1)%object(:) in Fortran notation)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].k_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>V.m^-1</p></td><td><p>Perpendicular wave vector, given on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].k_perpendicular[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].full_wave[:].k_perpendicular[:].values,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].k_perpendicular[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].full_wave[:].k_perpendicular[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on. Corresponds to the index used in the grid subset definition: grid_subset(:)/identifier/index</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].k_perpendicular[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].full_wave[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Global quantities for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].current_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>A</p></td><td><p>Wave driven toroidal current from a stand alone calculation (not consistent with other sources)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].current_tor_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].n_tor]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A</p></td><td><p>Wave driven toroidal current from a stand alone calculation (not consistent with other sources) per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].electrons.distribution_assumption</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Assumption on the distribution function used by the wave solver to calculate the power deposition on this species: 0 = Maxwellian (linear absorption); 1 = quasi-linear (F given by a distributions IDS). </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].electrons.power_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the fast particle population</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].electrons.power_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].n_tor]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the fast particle population per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].electrons.power_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the thermal particle population</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].electrons.power_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].n_tor]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the thermal particle population per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].frequency</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Hz</p></td><td><p>Wave frequency</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].distribution_assumption</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Assumption on the distribution function used by the wave solver to calculate the power deposition on this species: 0 = Maxwellian (linear absorption); 1 = quasi-linear (F given by a distributions IDS). </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].element[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].element[:].atoms_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].element[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying the species (e.g. H+, D+, T+, He+2, C+, D2, DT, CD4, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple state calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].power_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the fast particle population</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].power_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].n_tor]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the fast particle population per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].power_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the thermal particle population</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].power_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].n_tor]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the thermal particle population per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Collisional exchange with the various states of the ion species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying charge state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].power_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the fast particle population</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].power_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].n_tor]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the fast particle population per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].power_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the thermal particle population</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].power_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].n_tor]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Wave power absorbed by the thermal particle population per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle (equal to z_min if no bundle)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle (z_min = z_max = 0 for a neutral)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].global_quantities[:].n_tor</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Toroidal mode numbers, the wave vector toroidal component being defined as k_tor = n_tor grad phi where phi is the toroidal angle so that a positive n_tor means a wave propagating in the positive phi direction</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].power</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>W</p></td><td><p>Total absorbed wave power</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].global_quantities[:].power_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].global_quantities[:].n_tor]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].global_quantities[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Identifier of the coherent wave, in terms of the type and name of the antenna driving the wave and an index separating waves driven by the same antenna.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].identifier.antenna_name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the antenna that launches this wave. Corresponds to the name specified in antennas/ec(i)/name, or antennas/ic(i)/name or antennas/lh(i)/name (depends of antenna/wave type) in the ANTENNAS IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].identifier.index_in_antenna</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the wave (starts at 1), separating different waves generated from a single antenna.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].identifier.type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Wave/antenna type. index=1 for name=EC; index=2 for name=IC; index=3 for name=LH<br>0) unspecified : unspecified<br>1) EC : Wave field for electron cyclotron heating and current drive<br>2) LH : Wave field for lower hybrid heating and current drive<br>3) IC : Wave field for ion cyclotron frequency heating and current drive</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].identifier.type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].identifier.type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].identifier.type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Source radial profiles (flux surface averaged quantities) for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].current_parallel_density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A.m^-2</p></td><td><p>Flux surface averaged wave driven parallel current density = average(j.B) / B0, where B0 = vacuum_toroidal_field/b0.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].current_parallel_density_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>A.m^-2</p></td><td><p>Flux surface averaged wave driven parallel current density, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].current_tor_inside</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A</p></td><td><p>Wave driven toroidal current, inside a flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].current_tor_inside_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>A</p></td><td><p>Wave driven toroidal current, inside a flux surface, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Components of the electric field per toroidal mode number, averaged over the flux surface, where the averaged is weighted with the power deposition density, such that e_field = ave(e_field.power_density) / ave(power_density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].minus</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Right hand polarised electric field component for every flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].minus.amplitude</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Amplitude</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].minus.phase</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Phase</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Parallel electric field component for every flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].parallel.amplitude</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Amplitude</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].parallel.phase</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Phase</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].plus</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Left hand polarised electric field component for every flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].plus.amplitude</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Amplitude</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].e_field_n_tor[:].plus.phase</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Phase</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons.power_density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the fast species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons.power_density_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the fast species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons.power_density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the thermal species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons.power_density_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the thermal species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons.power_inside_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons.power_inside_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density), per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons.power_inside_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].electrons.power_inside_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density), per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Radial grid</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid.area</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2</p></td><td><p>Cross-sectional area of the flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid.psi</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Wb</p></td><td><p>Poloidal magnetic flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid.psi_boundary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Wb</p></td><td><p>Value of the poloidal magnetic flux at the plasma boundary (useful to normalize the psi array values when the radial grid doesn't go from the magnetic axis to the plasma boundary)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid.psi_magnetic_axis</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Wb</p></td><td><p>Value of the poloidal magnetic flux at the magnetic axis (useful to normalize the psi array values when the radial grid doesn't go from the magnetic axis to the plasma boundary)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid.rho_pol_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised poloidal flux coordinate = sqrt((psi(rho)-psi(magnetic_axis)) / (psi(LCFS)-psi(magnetic_axis)))</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid.rho_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Toroidal flux coordinate. rho_tor = sqrt(b_flux_tor/(pi*b0)) ~ sqrt(pi*r^2*b0/(pi*b0)) ~ r [m]. The toroidal field used in its definition is indicated under vacuum_toroidal_field/b0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate. The normalizing value for rho_tor_norm, is the toroidal flux coordinate at the equilibrium boundary (LCFS or 99.x % of the LCFS in case of a fixed boundary equilibium calculation, see time_slice/boundary/b_flux_pol_norm in the equilibrium IDS) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid.surface</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2</p></td><td><p>Surface area of the toroidal flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].grid.volume</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^3</p></td><td><p>Volume enclosed inside the magnetic surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].element[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].element[:].atoms_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].element[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying the species (e.g. H+, D+, T+, He+2, C+, D2, DT, CD4, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple state calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].power_density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the fast species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].power_density_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the fast species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].power_density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the thermal species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].power_density_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the thermal species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].power_inside_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].power_inside_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density), per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].power_inside_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].power_inside_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density), per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Collisional exchange with the various states of the ion species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying charge state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].power_density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the fast species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].power_density_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the fast species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].power_density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the thermal species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].power_density_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density on the thermal species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].power_inside_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].power_inside_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density), per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].power_inside_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].power_inside_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W</p></td><td><p>Absorbed wave power on thermal species inside a flux surface (cumulative volume integral of the absorbed power density), per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle (equal to z_min if no bundle)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle (z_min = z_max = 0 for a neutral)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].k_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Perpendicular wave vector,  averaged over the flux surface, where the averaged is weighted with the power deposition density, such that k_perpendicular = ave(k_perpendicular.power_density) / ave(power_density), for every flux surface and every toroidal number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].profiles_1d[:].n_tor</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Toroidal mode numbers, the wave vector toroidal component being defined as k_tor = n_tor grad phi where phi is the toroidal angle so that a positive n_tor means a wave propagating in the positive phi direction</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].power_density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged total absorbed wave power density (electrons + ion + fast populations)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].power_density_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Flux surface averaged absorbed wave power density per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].power_inside</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Total absorbed wave power (electrons + ion + fast populations) inside a flux surface (cumulative volume integral of the absorbed power density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_1d[:].power_inside_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_1d[:].grid.rho_tor_norm,<br> waves.coherent_wave[:].profiles_1d[:].n_tor]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W</p></td><td><p>Total absorbed wave power (electrons + ion + fast populations) inside a flux surface (cumulative volume integral of the absorbed power density), per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].profiles_1d[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_2d[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>2D profiles in poloidal cross-section, for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_2d[:].n_tor]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Components of the electric field per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].minus</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Right hand polarised electric field component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].minus.amplitude</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Amplitude</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].minus.phase</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Phase</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Parallel electric field component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].parallel.amplitude</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Amplitude</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].parallel.phase</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Phase</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].plus</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Left hand polarised electric field component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].plus.amplitude</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Amplitude</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].e_field_n_tor[:].plus.phase</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Phase</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].electrons.power_density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the fast species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].electrons.power_density_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N,<br> waves.coherent_wave[:].profiles_2d[:].n_tor]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the fast species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].electrons.power_density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the thermal species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].electrons.power_density_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N,<br> waves.coherent_wave[:].profiles_2d[:].n_tor]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the thermal species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>2D grid in a poloidal cross-section</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.area</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^2</p></td><td><p>Cross-sectional area of the flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.psi</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Wb</p></td><td><p>Poloidal magnetic flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.r</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m</p></td><td><p>Major radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.rho_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m</p></td><td><p>Toroidal flux coordinate. The toroidal field used in its definition is indicated under vacuum_toroidal_field/b0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].profiles_2d[:].grid.rho_tor_norm</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate. The normalizing value for rho_tor_norm, is the toroidal flux coordinate at the equilibrium boundary (LCFS or 99.x % of the LCFS in case of a fixed boundary equilibium calculation) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.theta_geometric</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>rad</p></td><td><p>Geometrical poloidal angle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.theta_straight</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>rad</p></td><td><p>Straight field line poloidal angle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.coherent_wave[:].profiles_2d[:].grid.rho_tor_norm]</p></td><td><p>STRUCTURE</p></td><td><p>m^3</p></td><td><p>Grid type: index=0: Rectangular grid in the (R,Z) coordinates; index=1: Rectangular grid in the (radial, theta_geometric) coordinates; index=2: Rectangular grid in the (radial, theta_straight) coordinates. index=3: unstructured grid.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.volume</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^3</p></td><td><p>Volume enclosed inside the magnetic surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].grid.z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m</p></td><td><p>Height</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].element[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].element[:].atoms_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].element[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying the species (e.g. H+, D+, T+, He+2, C+, D2, DT, CD4, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple state calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].power_density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the fast species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].power_density_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N,<br> waves.coherent_wave[:].profiles_2d[:].n_tor]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the fast species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].power_density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the thermal species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].power_density_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N,<br> waves.coherent_wave[:].profiles_2d[:].n_tor]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the thermal species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Collisional exchange with the various states of the ion species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying charge state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].power_density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the fast species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].power_density_fast_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N,<br> waves.coherent_wave[:].profiles_2d[:].n_tor]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the fast species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].power_density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the thermal species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].power_density_thermal_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N,<br> waves.coherent_wave[:].profiles_2d[:].n_tor]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density on the thermal species, per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle (equal to z_min if no bundle)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle (z_min = z_max = 0 for a neutral)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].profiles_2d[:].n_tor</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Toroidal mode numbers, the wave vector toroidal component being defined as k_tor = n_tor grad phi where phi is the toroidal angle so that a positive n_tor means a wave propagating in the positive phi direction</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].power_density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Total absorbed wave power density (electrons + ion + fast populations)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].profiles_2d[:].power_density_n_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N,<br> waves.coherent_wave[:].profiles_2d[:].n_tor]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>W.m^-3</p></td><td><p>Absorbed wave power density per toroidal mode number</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.coherent_wave[:].profiles_2d[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].wave_solver_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Type of wave deposition solver used for this wave. Index = 1 for beam/ray tracing; index = 2 for full wave</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].wave_solver_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].wave_solver_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.coherent_wave[:].wave_solver_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Interface Data Structure properties. This element identifies the node above as an IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.comment</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Any comment describing the content of this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.creation_date</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Date at which this data has been produced</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.homogeneous_time</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>This node must be filled (with 0, 1, or 2) for the IDS to be valid. If 1, the time of this IDS is homogeneous, i.e. the time values for this IDS are stored in the time node just below the root of this IDS. If 0, the time values are stored in the various time fields at lower levels in the tree. In the case only constant or static nodes are filled within the IDS, homogeneous_time must be set to 2</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>User-defined name for this IDS occurrence</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.occurrence</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p></p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.occurrence_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Type of data contained in this occurrence<br>1) reconstruction : Equilibrium reconstruction<br>2) prediction_fixed : Equilibrium prediction, fixed boundary<br>3) prediction_free : Equilibrium prediction, free boundary<br>4) mapping : Used for mapping equilibrium results from one grid type / resolution to another, or for including variables not present in the first set such as the calculation of magnetic field of other derived parameters</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.occurrence_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.occurrence_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.occurrence_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Information about the plugins used to write/read this IDS. This structure is filled automatically by the Access Layer at GET/PUT time, no need to fill it via a user program.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_get</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Plugin infrastructure used to GET the data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_get.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_get.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_get.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_get.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_get.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_put</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Plugin infrastructure used to PUT the data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_put.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_put.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_put.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_put.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.infrastructure_put.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of IDS nodes for which a plugin has been applied</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].get_operation</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins actually used to read back a node (potentially, multiple plugins can be applied, listed in reverse order of application). This information is filled by the plugin infrastructure during the GET operation.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].get_operation[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].get_operation[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].get_operation[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].get_operation[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].get_operation[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].get_operation[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the node within the IDS, following the syntax given in the link below. If empty, means the plugin applies to the whole IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].put_operation</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins used to PUT a node (potentially, multiple plugins can be applied, if so they are listed by order of application)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].put_operation[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].put_operation[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].put_operation[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].put_operation[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].put_operation[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].put_operation[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].readback</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins to be used to read back a node (potentially, multiple plugins can be applied, listed in reverse order of application) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].readback[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].readback[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].readback[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].readback[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].readback[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.plugins.node[:].readback[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.provenance</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Provenance information about this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.provenance.node</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of IDS nodes for which the provenance is given. The provenance information applies to the whole structure below the IDS node. For documenting provenance information for the whole IDS, set the size of this array of structure to 1 and leave the child "path" node empty</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.provenance.node[:].path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the node within the IDS, following the syntax given in the link below. If empty, means the provenance information applies to the whole IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.provenance.node[:].sources</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>List of sources used to import or calculate this node, identified as explained below. In case the node is the result of of a calculation / data processing, the source is an input to the process described in the "code" structure at the root of the IDS. The source can be an IDS (identified by a URI or a persitent identifier, see syntax in the link below) or non-IDS data imported directly from an non-IMAS database (identified by the command used to import the source, or the persistent identifier of the data source). Often data are obtained by a chain of processes, however only the last process input are recorded here. The full chain of provenance has then to be reconstructed recursively from the provenance information contained in the data sources.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.provider</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the person in charge of producing this data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.source</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Source of the data (any comment describing the origin of the data : code, path to diagnostic signals, processing method, ...). Superseeded by the new provenance structure.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.version_put</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Version of the access layer package used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.version_put.access_layer</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Access Layer used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.version_put.access_layer_language</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Programming language of the Access Layer high level API used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.ids_properties.version_put.data_dictionary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Data Dictionary used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.magnetic_axis</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Magnetic axis position (used to define a poloidal angle for the 2D profiles)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.magnetic_axis.r</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Major radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.magnetic_axis.z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Height</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>waves.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D_TYPE</p></td><td><p>s</p></td><td><p>Generic time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.vacuum_toroidal_field</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Characteristics of the vacuum toroidal field (used in rho_tor definition)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.vacuum_toroidal_field.b0</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[waves.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>T</p></td><td><p>Vacuum toroidal field at R0 [T]; Positive sign means anti-clockwise when viewing from above. The product R0B0 must be consistent with the b_tor_vacuum_r field of the tf IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>waves.vacuum_toroidal_field.r0</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>m</p></td><td><p>Reference major radius where the vacuum toroidal magnetic field is given (usually a fixed position such as the middle of the vessel at the equatorial midplane)</p></td></tr>
   </table>
   </table><p></p>
