
transport solver numerics
^^^^^^^^^^^^^^^^^^^^^^^^^

.. raw:: html

   <table border=1, width='100%'>
   <tr><th style="width:25%">Path</th><th style="width:25%">Dimensions</th><th>Type</th><th>Units</th><th>Description</th></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p></p></td><td><p></p></td><td><p>Numerical quantities used by transport solvers and convergence details</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.boundary_conditions_1d[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Boundary conditions of the radial transport equations for various time slices. To be removed when the solver_1d structure is finalized.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].current</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Boundary condition for the current diffusion equation.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].current.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: poloidal flux; 2: ip; 3: loop voltage; 4: undefined; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].current.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].current.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].current.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].current.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].current.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 3, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>W.m^-3</p></td><td><p>Boundary condition for the electron energy equation (temperature if ID = 1) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.energy.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: value of the field y; 2: radial derivative of the field (-dy/drho_tor); 3: scale length of the field y/(-dy/drho_tor); 4: flux; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.energy.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.energy.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.energy.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.energy.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.energy.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 4, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3.s^-1</p></td><td><p>Boundary condition for the electron density equation (density if ID = 1) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.particles.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: value of the field y; 2: radial derivative of the field (-dy/drho_tor); 3: scale length of the field y/(-dy/drho_tor); 4: flux; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.particles.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.particles.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.particles.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.particles.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].electrons.particles.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 4, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].energy_ion_total</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>W.m^-3</p></td><td><p>Boundary condition for the ion total (sum over ion species) energy equation (temperature if ID = 1) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].energy_ion_total.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: value of the field y; 2: radial derivative of the field (-dy/drho_tor); 3: scale length of the field y/(-dy/drho_tor); 4: flux; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].energy_ion_total.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].energy_ion_total.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].energy_ion_total.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].energy_ion_total.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].energy_ion_total.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 4, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>W.m^-3</p></td><td><p>Boundary condition for the ion energy equation (temperature if ID = 1) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].energy.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: value of the field y; 2: radial derivative of the field (-dy/drho_tor); 3: scale length of the field y/(-dy/drho_tor); 4: flux; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].energy.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].energy.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].energy.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].energy.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].energy.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 4, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying ion (e.g. H+, D+, T+, He+2, C+, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple states calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3.s^-1</p></td><td><p>Boundary condition for the ion density equation (density if ID = 1) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].particles.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: value of the field y; 2: radial derivative of the field (-dy/drho_tor); 3: scale length of the field y/(-dy/drho_tor); 4: flux; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].particles.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].particles.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].particles.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].particles.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].particles.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 4, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different states of the species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>W.m^-3</p></td><td><p>Boundary condition for the charge state energy equation (temperature if ID = 1) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].energy.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: value of the field y; 2: radial derivative of the field (-dy/drho_tor); 3: scale length of the field y/(-dy/drho_tor); 4: flux; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].energy.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].energy.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].energy.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].energy.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].energy.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 4, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].is_neutral</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Flag specifying if this state corresponds to a neutral (1) or not (0)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying charge state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].neutral_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Neutral type (if the considered state is a neutral), in terms of energy. ID =1: cold; 2: thermal; 3: fast; 4: NBI</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].neutral_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].neutral_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].neutral_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3.s^-1</p></td><td><p>Boundary condition for the charge state density equation (density if ID = 1) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].particles.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: value of the field y; 2: radial derivative of the field (-dy/drho_tor); 3: scale length of the field y/(-dy/drho_tor); 4: flux; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].particles.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].particles.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].particles.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].particles.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].particles.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 4, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].ion[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].momentum_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>kg.m.s^-1</p></td><td><p>Boundary condition for the total plasma toroidal momentum equation (summed over ion species and electrons) (momentum if ID = 1) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].momentum_tor.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. ID = 1: value of the field y; 2: radial derivative of the field (-dy/drho_tor); 3: scale length of the field y/(-dy/drho_tor); 4: flux; 5: generic boundary condition y expressed as a1y'+a2y=a3. 6: equation not solved; </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].momentum_tor.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].momentum_tor.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].momentum_tor.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].momentum_tor.rho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Position, in normalised toroidal flux, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_1d[:].momentum_tor.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For ID = 1 to 4, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.boundary_conditions_1d[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.boundary_conditions_ggd[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Boundary conditions of the transport equations, provided on the GGD, for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].current</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Boundary condition for the current diffusion equation, on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].current[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].current[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].current[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Identifier of the boundary condition type. List of options TBD.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].current[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].current[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].current[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].current[:].values</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>List of vector components, one list per element in the grid subset. First dimenstion: element index. Second dimension: vector component index (for ID = 1 to 3, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>W.m^-3</p></td><td><p>Boundary condition for the electron energy equation (temperature if ID = 1), on various grid subsets </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.energy[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.energy[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.energy[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. List of options TBD.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.energy[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.energy[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.energy[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.energy[:].values</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>List of vector components, one list per element in the grid subset. First dimenstion: element index. Second dimension: vector component index (for ID = 1 to 3, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>m^-3.s^-1</p></td><td><p>Boundary condition for the electron density equation (density if ID = 1), on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.particles[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.particles[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.particles[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. List of options TBD.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.particles[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.particles[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.particles[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].electrons.particles[:].values</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>List of vector components, one list per element in the grid subset. First dimenstion: element index. Second dimension: vector component index (for ID = 1 to 3, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Grid description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].base</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of bases for the grid subset. For each base, the structure describes the projection of the base vectors on the canonical frame of the grid.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].base[:].jacobian</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Metric Jacobian</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].base[:].tensor_contravariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Contravariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].base[:].tensor_covariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Covariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Space dimension of the grid subset elements, using the convention 1=nodes, 2=edges, 3=faces, 4=cells/volumes</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of elements defining the grid subset. An element is defined by a combination of objects from potentially all spaces</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element[:].object</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of objects defining the element</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element[:].object[:].dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Dimension of the object - using the convention  1=nodes, 2=edges, 3=faces, 4=cells/volumes</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element[:].object[:].index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Object index</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element[:].object[:].space</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the space from which that object is taken</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Grid subset identifier<br>0) unspecified : unspecified<br>1) nodes : All nodes (0D) belonging to the associated spaces, implicit declaration (no need to replicate the grid elements in the grid_subset structure). In case of a structured grid represented with multiple 1D spaces, the order of the implicit elements in the grid_subset follows Fortran ordering, i.e. iterate always on nodes of the first space first, then move to the second node of the second space, ... : [((s1_1 to s1_end), s2_1, s3_1 ... sN_1), (((s1_1 to s1_end), s2_2, s3_1, ... sN_1)), ... ((s1_1 to s1_end), s2_end, s3_end ... sN_end)]<br>2) edges : All edges (1D) belonging to the associated spaces, implicit declaration (no need to replicate the grid elements in the grid_subset structure)<br>3) x_aligned_edges : All x-aligned (poloidally) aligned edges belonging to the associated spaces<br>4) y_aligned_edges : All y-aligned (radially) aligned edges belonging to the associated spaces<br>5) cells : All cells (2D) belonging to the associated spaces, implicit declaration (no need to replicate the grid elements in the grid_subset structure)<br>6) x_points : Nodes defining x-points<br>7) core_cut : y-aligned edges inside the separatrix connecting to the active x-point<br>8) PFR_cut : y-aligned edges in the private flux region connecting to the active x-point<br>9) outer_throat : y-aligned edges in the outer SOL connecting to the active x-point<br>10) inner_throat : y-aligned edges in the inner SOL connecting to the active x-point<br>11) outer_midplane : y-aligned edges connecting to the node closest to outer midplane on the separatrix<br>12) inner_midplane : y-aligned edges connecting to the node closest to inner midplane on the separatrix<br>13) outer_target : y-aligned edges defining the outer target<br>14) inner_target : y-aligned edges defining the inner target<br>15) core_boundary : Innermost x-aligned edges<br>16) separatrix : x-aligned edges defining the active separatrix<br>17) main_chamber_wall : x-aligned edges defining main chamber wall outside of the divertor regions<br>18) outer_baffle : x-aligned edges defining the chamber wall of the outer active divertor region<br>19) inner_baffle : x-aligned edges defining the chamber wall of the inner active divertor region<br>20) outer_PFR_wall : x-aligned edges defining the private flux region wall of the outer active divertor region<br>21) inner_PFR_wall : x-aligned edges defining the private flux region wall of the inner active divertor region<br>22) core : Cells inside the active separatrix<br>23) sol : Cells defining the main SOL outside of the divertor regions<br>24) outer_divertor : Cells defining the outer divertor region<br>25) inner_divertor : Cells defining the inner divertor region<br>26) core_sol : x-aligned edges defining part of active separatrix separating core and sol<br>27) full_main_chamber_wall : main_chamber_wall + outer_baffle(s) + inner_baffle(s)<br>28) full_PFR_wall : outer_PFR__wall(s) + inner_PFR_wall(s)<br>29) core_cut_X2 : y-aligned edges inside the separatrix connecting to the non-active x-point<br>30) PFR_cut_X2 : y-aligned edges in the private flux region connecting to the non-active x-point<br>31) outer_throat_X2 : y-aligned edges in the outer SOL connecting to the non-active x-point<br>32) inner_throat_X2 : y-aligned edges in the inner SOL connecting to the non-active x-point<br>33) separatrix_2 : x-aligned edges defining the non-active separatrix<br>34) outer_baffle_2 : x-aligned edges defining the chamber wall of the outer non-active divertor region<br>35) inner_baffle_2 : x-aligned edges defining the chamber wall of the inner non-active divertor region<br>36) outer_PFR_wall_2 : x-aligned edges defining the private flux region wall of the outer non-active divertor region<br>37) inner_PFR_wall_2 : x-aligned edges defining the private flux region wall of the inner non-active divertor region<br>38) intra_sep : Cells between the two separatrices<br>39) outer_divertor_2 : Cells defining the outer inactive divertor region<br>40) inner_divertor_2 : Cells defining the inner inactive divertor region<br>41) outer_target_2 : y-aligned edges defining the outer inactive target<br>42) inner_target_2 : y-aligned edges defining the inner inactive target<br>43) volumes : All volumes (3D) belonging to the associated spaces, implicit declaration (no need to replicate the grid elements in the grid_subset structure)<br>44) full_wall : All edges defining walls, baffles, and targets<br>45) outer_sf_leg_entrance_1 : y-aligned edges defining the SOL entrance of the first snowflake outer leg<br>46) outer_sf_leg_entrance_2 : y-aligned edges defining the SOL entrance of the third snowflake outer leg<br>47) outer_sf_pfr_connection_1 : y-aligned edges defining the connection between the outer snowflake entrance and third leg<br>48) outer_sf_pfr_connection_2 : y-aligned edges defining the connection between the outer snowflake first and second leg<br>100) magnetic_axis : Point corresponding to the magnetic axis<br>101) outer_mid_plane_separatrix : Point on active separatrix at outer mid-plane<br>102) inner_mid_plane_separatrix : Point on active separatrix at inner mid-plane<br>103) outer_target_separatrix : Point on active separatrix at outer active target<br>104) inner_target_separatrix : Point on active separatrix at inner active target<br>105) outer_target_separatrix_2 : Point on non-active separatrix at outer non-active target<br>106) inner_target_separatrix_2 : Point on non-active separatrix at inner non-active target</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].metric</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Metric of the canonical frame onto Cartesian coordinates</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].metric.jacobian</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Metric Jacobian</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].metric.tensor_contravariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Contravariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].metric.tensor_covariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.boundary_conditions_ggd[:].grid.grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Covariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Grid identifier<br>0) unspecified : unspecified<br>1) linear : Linear<br>2) cylinder : Cylindrical geometry (straight in axial direction)<br>3) limiter : Limiter<br>4) SN : Single null<br>5) CDN : Connected double null<br>6) DDN_bottom : Disconnected double null with inner X-point below the midplane<br>7) DDN_top : Disconnected double null with inner X-point above the midplane<br>8) annulus : Annular geometry (not necessarily with straight axis)<br>9) stellarator_island : Stellarator island geometry<br>10) structured_spaces : Structured grid represented with multiple spaces of dimension 1<br>11) LFS_snowflake_minus : Snowflake grid with secondary x point on the low field side, and the secondary separatrix on top of the primary<br>12) LFS_snowflake_plus : Snowflake grid with secondary x point to the right of the primary, and the secondary separatrix below the primary<br>100) reference : Refers to a GGD described in another IDS indicated by grid_path. In such a case, do not fill the grid_ggd node of this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the grid, including the IDS name, in case of implicit reference to a grid_ggd node described in another IDS. To be filled only if the grid is not described explicitly in this grid_ggd structure. Example syntax: 'wall:0/description_ggd(1)/grid_ggd', means that the grid is located in the wall IDS, occurrence 0, with ids path 'description_ggd(1)/grid_ggd'. See the link below for more details about IDS paths</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of grid spaces</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].coordinates_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Type of coordinates describing the physical space, for every coordinate of the space. The size of this node therefore defines the dimension of the space. The meaning of these predefined integer constants can be found in the Data Dictionary under utilities/coordinate_identifier.xml</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].geometry_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Type of space geometry (0: standard, 1:Fourier, >1: Fourier with periodicity)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].geometry_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].geometry_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].geometry_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Space identifier<br>0) unspecified : unspecified<br>1) primary_standard : Primary space defining the standard grid<br>2) primary_staggered : Primary space defining a grid staggered with respect to the primary standard space<br>3) secondary_structured : Secondary space defining additional dimensions that extend the primary standard space in a structured way</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Definition of the space objects for every dimension (from one to the dimension of the highest-dimensional objects). The index correspond to 1=nodes, 2=edges, 3=faces, 4=cells/volumes, .... For every index, a collection of objects of that dimension is described.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].geometry_content</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Content of the ../object/geometry node for this dimension<br>0) unspecified : unspecified<br>1) node_coordinates : For nodes : node coordinates<br>11) node_coordinates_connection : For nodes : node coordinates, then connection length, and distance in the poloidal plane to the nearest solid surface outside the separatrix<br>21) edge_areas : For edges : contains 3 surface areas after uniform extension in the third dimension of the edges. Geometry(1) and geometry(2) are the projections of that area along the local poloidal and radial coordinate respectively. Geometry(3) is the full surface area of the extended edge<br>31) face_indices_volume : For faces : coordinates indices (ix, iy) of the face within the structured grid of the code. The third element contains the volume after uniform extension in the third dimension of the faces<br>32) face_indices_volume_connection : For faces : coordinates indices (ix, iy) of the face within the structured grid of the code. The third element contains the volume after uniform extension in the third dimension of the faces. The fourth element is the connection length. The fifth element is the distance in the poloidal plane to the nearest solid surface outside the separatrix</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].geometry_content.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].geometry_content.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].geometry_content.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].object</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of objects for a given dimension</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].object[:].boundary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of  (n-1)-dimensional objects defining the boundary of this n-dimensional object</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].object[:].boundary[:].index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of this (n-1)-dimensional boundary object</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].object[:].boundary[:].neighbours</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>List of indices of the n-dimensional objects adjacent to the given n-dimensional object. An object can possibly have multiple neighbours on a boundary</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].object[:].geometry</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Geometry data associated with the object, its detailed content is defined by ../../geometry_content. Its dimension depends on the type of object, geometry and coordinate considered. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].object[:].geometry_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>2D geometry data associated with the object. Its dimension depends on the type of object, geometry and coordinate considered. Typically, the first dimension represents the object coordinates, while the second dimension would represent the values of the various degrees of freedom of the finite element attached to the object.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].object[:].measure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>m^dimension</p></td><td><p>Measure of the space object, i.e. physical size (length for 1d, area for 2d, volume for 3d objects,...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].grid.space[:].objects_per_dimension[:].object[:].nodes</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>List of nodes forming this object (indices to objects_per_dimension(1)%object(:) in Fortran notation)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>W.m^-3</p></td><td><p>Boundary condition for the ion energy equation (temperature if ID = 1), on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].energy[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].energy[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].energy[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. List of options TBD.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].energy[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].energy[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].energy[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].energy[:].values</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>List of vector components, one list per element in the grid subset. First dimenstion: element index. Second dimension: vector component index (for ID = 1 to 3, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying ion (e.g. H+, D+, T+, He+2, C+, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple states calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>m^-3.s^-1</p></td><td><p>Boundary condition for the ion density equation (density if ID = 1), on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].particles[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].particles[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].particles[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. List of options TBD.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].particles[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].particles[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].particles[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].particles[:].values</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>List of vector components, one list per element in the grid subset. First dimenstion: element index. Second dimension: vector component index (for ID = 1 to 3, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different states of the species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>W.m^-3</p></td><td><p>Boundary condition for the charge state energy equation (temperature if ID = 1), on various grid subsets </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].energy[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].energy[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].energy[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. List of options TBD.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].energy[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].energy[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].energy[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].energy[:].values</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>List of vector components, one list per element in the grid subset. First dimenstion: element index. Second dimension: vector component index (for ID = 1 to 3, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].is_neutral</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Flag specifying if this state corresponds to a neutral (1) or not (0)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying charge state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].neutral_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Neutral type (if the considered state is a neutral), in terms of energy. ID =1: cold; 2: thermal; 3: fast; 4: NBI</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].neutral_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].neutral_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].neutral_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p>m^-3.s^-1</p></td><td><p>Boundary condition for the charge state density equation (density if ID = 1), on various grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].particles[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].particles[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].particles[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Identifier of the boundary condition type. List of options TBD.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].particles[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].particles[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].particles[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].particles[:].values</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>List of vector components, one list per element in the grid subset. First dimenstion: element index. Second dimension: vector component index (for ID = 1 to 3, only the first position in the vector is used. For ID = 5, all three positions are used, meaning respectively a1, a2, a3)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.boundary_conditions_ggd[:].ion[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.boundary_conditions_ggd[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Generic decription of the code-specific parameters for the code that has produced this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.library</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of external libraries used by the code that has produced this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.library[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.library[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.library[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.library[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.library[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.library[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software generating IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.output_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.time]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Output flag : 0 means the run is successful, other values mean some difficulty has been encountered, the exact meaning is then code specific. Negative values mean the result shall not be used.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.code.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Convergence details To be removed when the solver_1d structure is finalized.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.convergence.equations[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Convergence details of the transport equations, for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].current</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Convergence details of the current diffusion equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].current.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].current.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].current.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].current.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>W.m^-3</p></td><td><p>Convergence details of the electron energy equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.energy.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.energy.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.energy.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.energy.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3.s^-1</p></td><td><p>Convergence details of the electron density equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.particles.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.particles.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.particles.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].electrons.particles.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].energy_ion_total</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>W.m^-3</p></td><td><p>Convergence details of the ion total (sum over ion species) energy equation </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].energy_ion_total.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].energy_ion_total.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].energy_ion_total.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].energy_ion_total.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>W.m^-3</p></td><td><p>Convergence details of the ion energy equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].energy.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].energy.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].energy.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].energy.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying ion (e.g. H+, D+, T+, He+2, C+, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple state calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3.s^-1</p></td><td><p>Convergence details of the  ion density equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].particles.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].particles.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].particles.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].particles.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Convergence details of the related to the different states transport equations</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].energy</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>W.m^-3</p></td><td><p>Convergence details of the charge state energy equation </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].energy.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].energy.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].energy.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].energy.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].is_neutral</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Flag specifying if this state corresponds to a neutral (1) or not (0)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying charge state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].neutral_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Neutral type (if the considered state is a neutral), in terms of energy. ID =1: cold; 2: thermal; 3: fast; 4: NBI</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].neutral_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].neutral_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].neutral_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].particles</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3.s^-1</p></td><td><p>Convergence details of the charge state density equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].particles.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].particles.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].particles.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].particles.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.equations[:].ion[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.convergence.equations[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.time_step</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>s</p></td><td><p>Internal time step used by the transport solver (assuming all transport equations are solved with the same time step)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.convergence.time_step.data</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.convergence.time_step.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.convergence.time_step.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D_TYPE</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Radial profiles derivatives for various time slices. To be removed when the solver_1d structure is finalized.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d2_drho_tor_norm2</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Second derivatives of total ion quantities with respect to the normalised toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d2_drho_tor_norm2.n_i_total_over_n_e</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Ratio of total ion density (sum over species and charge states) over electron density. (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d2_drho_tor_norm2.pressure_ion_total</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total thermal ion pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d2psi_drho_tor2</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Wb.m^-2</p></td><td><p>Second derivative of the poloidal flux profile with respect to the toroidal flux coordinate</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d_drho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Derivatives of total ion quantities with respect to the normalised toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d_drho_tor_norm.n_i_total_over_n_e</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Ratio of total ion density (sum over species and charge states) over electron density. (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d_drho_tor_norm.pressure_ion_total</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total thermal ion pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Derivatives of total ion quantities with respect to time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d_dt.n_i_total_over_n_e</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Ratio of total ion density (sum over species and charge states) over electron density. (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d_dt.pressure_ion_total</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total thermal ion pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].d_dvolume_drho_tor_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2.s^-1</p></td><td><p>Partial derivative with respect to time of the derivative of the volume with respect to the toroidal flux coordinate</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].dpsi_drho_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Wb.m^-1</p></td><td><p>Derivative of the poloidal flux profile with respect to the toroidal flux coordinate</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].dpsi_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V</p></td><td><p>Derivative of the poloidal flux profile with respect to time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].dpsi_dt_cphi</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V</p></td><td><p>Derivative of the poloidal flux profile with respect to time, at constant toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].dpsi_dt_crho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V</p></td><td><p>Derivative of the poloidal flux profile with respect to time, at constant normalised toroidal flux coordinate</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].drho_tor_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Partial derivative of the toroidal flux coordinate profile with respect to time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Second derivatives with respect to the normalised toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d2_drho_tor_norm2.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Derivatives with respect to the normalised toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_drho_tor_norm.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Derivatives with respect to time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].electrons.d_dt.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Radial grid</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid.area</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2</p></td><td><p>Cross-sectional area of the flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid.psi</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Wb</p></td><td><p>Poloidal magnetic flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid.psi_boundary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Wb</p></td><td><p>Value of the poloidal magnetic flux at the plasma boundary (useful to normalize the psi array values when the radial grid doesn't go from the magnetic axis to the plasma boundary)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid.psi_magnetic_axis</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Wb</p></td><td><p>Value of the poloidal magnetic flux at the magnetic axis (useful to normalize the psi array values when the radial grid doesn't go from the magnetic axis to the plasma boundary)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid.rho_pol_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised poloidal flux coordinate = sqrt((psi(rho)-psi(magnetic_axis)) / (psi(LCFS)-psi(magnetic_axis)))</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid.rho_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Toroidal flux coordinate. rho_tor = sqrt(b_flux_tor/(pi*b0)) ~ sqrt(pi*r^2*b0/(pi*b0)) ~ r [m]. The toroidal field used in its definition is indicated under vacuum_toroidal_field/b0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate. The normalizing value for rho_tor_norm, is the toroidal flux coordinate at the equilibrium boundary (LCFS or 99.x % of the LCFS in case of a fixed boundary equilibium calculation, see time_slice/boundary/b_flux_pol_norm in the equilibrium IDS) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid.surface</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2</p></td><td><p>Surface area of the toroidal flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].grid.volume</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^3</p></td><td><p>Volume enclosed inside the magnetic surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Second derivatives with respect to the normalised toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure  (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d2_drho_tor_norm2.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Derivatives with respect to the normalised toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure  (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_drho_tor_norm.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Derivatives with respect to time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure  (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].d_dt.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying ion (e.g. H+, D+, T+, He+2, C+, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple state calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different states of the species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Second derivatives with respect to the normalised toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d2_drho_tor_norm2.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Derivatives with respect to the normalised toroidal flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_drho_tor_norm.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Derivatives with respect to time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt.density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt.pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt.pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt.pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt.velocity_pol</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].d_dt.velocity_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.derivatives_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].is_neutral</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Flag specifying if this state corresponds to a neutral (1) or not (0)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying charge state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].neutral_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Neutral type (if the considered state is a neutral), in terms of energy. ID =1: cold; 2: thermal; 3: fast; 4: NBI</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].neutral_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].neutral_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].neutral_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.derivatives_1d[:].ion[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.derivatives_1d[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Interface Data Structure properties. This element identifies the node above as an IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.comment</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Any comment describing the content of this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.creation_date</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Date at which this data has been produced</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.homogeneous_time</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>This node must be filled (with 0, 1, or 2) for the IDS to be valid. If 1, the time of this IDS is homogeneous, i.e. the time values for this IDS are stored in the time node just below the root of this IDS. If 0, the time values are stored in the various time fields at lower levels in the tree. In the case only constant or static nodes are filled within the IDS, homogeneous_time must be set to 2</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>User-defined name for this IDS occurrence</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.occurrence</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p></p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.occurrence_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Type of data contained in this occurrence<br>1) reconstruction : Equilibrium reconstruction<br>2) prediction_fixed : Equilibrium prediction, fixed boundary<br>3) prediction_free : Equilibrium prediction, free boundary<br>4) mapping : Used for mapping equilibrium results from one grid type / resolution to another, or for including variables not present in the first set such as the calculation of magnetic field of other derived parameters</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.occurrence_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.occurrence_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.occurrence_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Information about the plugins used to write/read this IDS. This structure is filled automatically by the Access Layer at GET/PUT time, no need to fill it via a user program.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_get</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Plugin infrastructure used to GET the data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_get.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_get.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_get.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_get.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_get.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_put</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Plugin infrastructure used to PUT the data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_put.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_put.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_put.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_put.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.infrastructure_put.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of IDS nodes for which a plugin has been applied</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].get_operation</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins actually used to read back a node (potentially, multiple plugins can be applied, listed in reverse order of application). This information is filled by the plugin infrastructure during the GET operation.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].get_operation[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].get_operation[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].get_operation[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].get_operation[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].get_operation[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].get_operation[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the node within the IDS, following the syntax given in the link below. If empty, means the plugin applies to the whole IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].put_operation</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins used to PUT a node (potentially, multiple plugins can be applied, if so they are listed by order of application)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].put_operation[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].put_operation[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].put_operation[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].put_operation[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].put_operation[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].put_operation[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].readback</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins to be used to read back a node (potentially, multiple plugins can be applied, listed in reverse order of application) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].readback[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].readback[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].readback[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].readback[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].readback[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.plugins.node[:].readback[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.provenance</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Provenance information about this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.provenance.node</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of IDS nodes for which the provenance is given. The provenance information applies to the whole structure below the IDS node. For documenting provenance information for the whole IDS, set the size of this array of structure to 1 and leave the child "path" node empty</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.provenance.node[:].path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the node within the IDS, following the syntax given in the link below. If empty, means the provenance information applies to the whole IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.provenance.node[:].sources</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>List of sources used to import or calculate this node, identified as explained below. In case the node is the result of of a calculation / data processing, the source is an input to the process described in the "code" structure at the root of the IDS. The source can be an IDS (identified by a URI or a persitent identifier, see syntax in the link below) or non-IDS data imported directly from an non-IMAS database (identified by the command used to import the source, or the persistent identifier of the data source). Often data are obtained by a chain of processes, however only the last process input are recorded here. The full chain of provenance has then to be reconstructed recursively from the provenance information contained in the data sources.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.provider</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the person in charge of producing this data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.source</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Source of the data (any comment describing the origin of the data : code, path to diagnostic signals, processing method, ...). Superseeded by the new provenance structure.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.version_put</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Version of the access layer package used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.version_put.access_layer</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Access Layer used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.version_put.access_layer_language</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Programming language of the Access Layer high level API used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.ids_properties.version_put.data_dictionary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Data Dictionary used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.primary_coordinate</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Primary coordinate system with which the transport equations are solved. For a 1D transport solver: index = 1 means rho_tor_norm; 2 = rho_tor.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.primary_coordinate.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.primary_coordinate.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.primary_coordinate.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.restart_files</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.restart_files[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of code-specific restart files for a given time slice. These files are managed by a physical application to ensure its restart during long simulations</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.restart_files[:].descriptions</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.restart_files[:].names]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Descriptions of the restart files</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.restart_files[:].names</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Names of the restart files</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.restart_files[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Solver identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Numerics related to 1D radial solver, for various time slices.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].control_parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Solver-specific input or output quantities</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].control_parameters.integer0d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of integer type scalar control parameters</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].control_parameters.integer0d[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the control parameter</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].control_parameters.integer0d[:].value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Value of the control parameter</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].control_parameters.real0d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of real type scalar control parameters</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].control_parameters.real0d[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the control parameter</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].control_parameters.real0d[:].value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the control parameter</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].d_dvolume_drho_tor_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2.s^-1</p></td><td><p>Partial derivative with respect to time of the derivative of the volume with respect to the toroidal flux coordinate</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].drho_tor_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Partial derivative of the toroidal flux coordinate profile with respect to time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of transport equations</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].boundary_condition</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of boundary conditions of the transport equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].boundary_condition[:].position</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>mixed</p></td><td><p>Position, in terms of the primary coordinate, at which the boundary condition is imposed. Outside this position, the value of the data are considered to be prescribed (in case of a single boundary condition).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].boundary_condition[:].type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Boundary condition type<br>0) not_solved : Equation is not solved<br>1) value : Boundary condition is the value of the equations primary quantity<br>2) derivative_or_ip : Boundary condition is the radial derivative of the equations primary quantity, or the plasma current for the current diffusion equation<br>3) e_folding_length_or_vloop : Boundary condition is the e-folding length of the equations primary quantity, or the loop voltage for the current diffusion equation<br>4) flux : Boundary condition is the flux of the equations primary quantity<br>5) combination : Boundary condition is a linear combination of radial derivative and value of the flux of the equations primary quantity, in the form a1.y-prime + a2.y = a3</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].boundary_condition[:].type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].boundary_condition[:].type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].boundary_condition[:].type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].boundary_condition[:].value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the boundary condition. For type/index = 1 to 3, only the first position in the vector is used. For type/index = 5, all three positions are used, meaning respectively a1, a2, a3. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].coefficient</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of numerical coefficients involved in the transport equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].coefficient[:].profile</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Radial profile of the numerical coefficient</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].computation_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Computation mode for this equation<br>0) static : Equation is not solved, no profile evolution<br>1) interpretative : Equation is not solved, profile is evolved by interpolating from input objects<br>2) predictive : Equation is solved, profile evolves</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].computation_mode.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].computation_mode.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].computation_mode.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].convergence</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Convergence details</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].convergence.delta_relative</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Relative deviation on the primary quantity of the transport equation between the present and the  previous iteration of the solver</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].convergence.delta_relative.expression</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Expression used by the solver to calculate the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].convergence.delta_relative.value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>-</p></td><td><p>Value of the relative deviation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].convergence.iterations_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of iterations carried out in the convergence loop</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Profile and derivatives of the primary quantity of the transport equation</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.d2_dr2</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Second order radial derivative with respect to the primary coordinate</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.d_dr</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Radial derivative with respect to the primary coordinate</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.d_dt</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Time derivative</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.d_dt_cphi</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Derivative with respect to time, at constant toroidal flux (for current diffusion equation)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.d_dt_cr</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Derivative with respect to time, at constant primary coordinate coordinate (for current diffusion equation)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Identifier of the primary quantity of the transport equation. The description node contains the path to the quantity in the physics IDS (example: core_profiles/profiles_1d/ion(1)/density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.ion_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>If the primary quantity is related to a ion species, index of the corresponding species in the core_profiles/profiles_1d/ion array</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.neutral_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>If the primary quantity is related to a neutral species, index of the corresponding species in the core_profiles/profiles_1d/neutral array</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.profile</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Profile of the primary quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].equation[:].primary_quantity.state_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>If the primary quantity is related to a particular state (of an ion or a neutral species), index of the corresponding state in the core_profiles/profiles_1d/ion (or neutral)/state array</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Radial grid</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid.area</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2</p></td><td><p>Cross-sectional area of the flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid.psi</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Wb</p></td><td><p>Poloidal magnetic flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid.psi_boundary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Wb</p></td><td><p>Value of the poloidal magnetic flux at the plasma boundary (useful to normalize the psi array values when the radial grid doesn't go from the magnetic axis to the plasma boundary)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid.psi_magnetic_axis</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Wb</p></td><td><p>Value of the poloidal magnetic flux at the magnetic axis (useful to normalize the psi array values when the radial grid doesn't go from the magnetic axis to the plasma boundary)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid.rho_pol_norm</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised poloidal flux coordinate = sqrt((psi(rho)-psi(magnetic_axis)) / (psi(LCFS)-psi(magnetic_axis)))</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid.rho_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Toroidal flux coordinate. rho_tor = sqrt(b_flux_tor/(pi*b0)) ~ sqrt(pi*r^2*b0/(pi*b0)) ~ r [m]. The toroidal field used in its definition is indicated under vacuum_toroidal_field/b0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.solver_1d[:].grid.rho_tor_norm</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate. The normalizing value for rho_tor_norm, is the toroidal flux coordinate at the equilibrium boundary (LCFS or 99.x % of the LCFS in case of a fixed boundary equilibium calculation, see time_slice/boundary/b_flux_pol_norm in the equilibrium IDS) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid.surface</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2</p></td><td><p>Surface area of the toroidal flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.solver_1d[:].grid.volume</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.solver_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^3</p></td><td><p>Volume enclosed inside the magnetic surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.solver_1d[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D_TYPE</p></td><td><p>s</p></td><td><p>Generic time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.time_step</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>s</p></td><td><p>Internal time step used by the transport solver (assuming all transport equations are solved with the same time step)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.time_step.data</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.time_step.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.time_step.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D_TYPE</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.time_step_average</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>s</p></td><td><p>Average internal time step used by the transport solver between the previous and the current time stored for this quantity (assuming all transport equations are solved with the same time step)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.time_step_average.data</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.time_step_average.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.time_step_average.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D_TYPE</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.time_step_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>s</p></td><td><p>Minimum internal time step used by the transport solver between the previous and the current time stored for this quantity (assuming all transport equations are solved with the same time step)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.time_step_min.data</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.time_step_min.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>transport_solver_numerics.time_step_min.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D_TYPE</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.vacuum_toroidal_field</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Characteristics of the vacuum toroidal field (used in rho_tor definition and in the normalization of current densities)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.vacuum_toroidal_field.b0</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[transport_solver_numerics.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>T</p></td><td><p>Vacuum toroidal field at R0 [T]; Positive sign means anti-clockwise when viewing from above. The product R0B0 must be consistent with the b_tor_vacuum_r field of the tf IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>transport_solver_numerics.vacuum_toroidal_field.r0</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>m</p></td><td><p>Reference major radius where the vacuum toroidal magnetic field is given (usually a fixed position such as the middle of the vessel at the equatorial midplane)</p></td></tr>
   </table>
   </table><p></p>
