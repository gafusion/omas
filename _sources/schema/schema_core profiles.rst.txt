
core profiles
^^^^^^^^^^^^^

.. raw:: html

   <table border=1, width='100%'>
   <tr><th style="width:25%">Path</th><th style="width:25%">Dimensions</th><th>Type</th><th>Units</th><th>Description</th></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p></p></td><td><p></p></td><td><p>Core plasma profiles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Generic decription of the code-specific parameters for the code that has produced this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.commit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.library</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of external libraries used by the code that has produced this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.library[:].commit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.library[:].description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.library[:].name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.library[:].parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.library[:].repository</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.library[:].version</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software generating IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.output_flag</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Output flag : 0 means the run is successful, other values mean some difficulty has been encountered, the exact meaning is then code specific. Negative values mean the result shall not be used.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.repository</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.code.version</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.covariance</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>User defined covariance matrix. The covariance of various quantities can be stored here, these quantities are referred to by giving their IDS path in the rows_uri list</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.covariance.data</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.covariance.rows_uri,<br> core_profiles.covariance.rows_uri]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>Covariance matrix</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.covariance.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Description of this covariance matrix</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.covariance.rows_uri</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>List of URIs corresponding to the rows (1st dimension) of the covariance matrix. If not all indices of a given node are used, they must be listed explicitly e.g. rows_uri(i) = pf_active:1/coil(i) will refer to a list of indices of the occurrence 1 of the pf_active IDS of this data entry. If the rows correspond to all indices of a given vector it is sufficient to give a single URI where this vector is denoted using the (:) implicit notation, e.g. rows_uri(1) = /grid_ggd(3)/grid_subset(2)/elements(:).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Various global quantities derived from the profiles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.beta_pol</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Poloidal beta. Defined as betap = 4 int(p dV) / [R_0 * mu_0 * Ip^2]</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.beta_tor</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Toroidal beta, defined as the volume-averaged total perpendicular pressure divided by (B0^2/(2*mu0)), i.e. beta_toroidal = 2 mu0 int(p dV) / V / B0^2</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.beta_tor_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal beta, defined as 100 * beta_tor * a[m] * B0 [T] / ip [MA] </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.current_bootstrap</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A</p></td><td><p>Bootstrap current (toroidal component). Positive sign means anti-clockwise when viewed from above.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.current_non_inductive</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A</p></td><td><p>Total non-inductive current (toroidal component). Positive sign means anti-clockwise when viewed from above.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.ejima</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Ejima coefficient : resistive psi losses divided by (mu0*R*Ip). See S. Ejima et al, Nuclear Fusion, Vol.22, No.10 (1982), 1313</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.energy_diamagnetic</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>J</p></td><td><p>Plasma energy content = 3/2 * integral over the plasma volume of the total perpendicular pressure </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.ion</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species, in the sense of isonuclear or isomolecular sequences. The set of ion species of this array must be the same as the one defined in profiles_1d/ion, at the time slice indicated in ion_time_slice</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.ion[:].n_i_volume_average</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Volume averaged density of this ion species (averaged over the plasma volume up to the LCFS)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.ion[:].t_i_volume_average</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Volume averaged temperature of this ion species (averaged over the plasma volume up to the LCFS)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.ion_time_slice</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>s</p></td><td><p>Time slice of the profiles_1d array used to define the ion composition of the global_quantities/ion array.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.ip</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A</p></td><td><p>Total plasma current (toroidal component). Positive sign means anti-clockwise when viewed from above.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.li</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Internal inductance. The li_3 definition is used, i.e. li_3 = 2/R0/mu0^2/Ip^2 * int(Bp^2 dV).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.li_3</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Internal inductance. The li_3 definition is used, i.e. li_3 = 2/R0/mu0^2/Ip^2 * int(Bp^2 dV).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.n_e_volume_average</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Volume averaged electron density (average over the plasma volume up to the LCFS)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.resistive_psi_losses</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Wb</p></td><td><p>Resistive part of the poloidal flux losses, defined as the volume-averaged scalar product of the electric field and the ohmic current density, normalized by the plasma current and integrated in time from the beginning of the plasma discharge: int ( (int(E_field_tor.j_ohm_tor) dV) / Ip ) dt)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.t_e_peaking</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Electron temperature peaking factor, defined as the Te value at the magnetic axis divided by the volume averaged Te (average over the plasma volume up to the LCFS)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.t_e_volume_average</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Volume averaged electron temperature (average over the plasma volume up to the LCFS)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.t_i_average_peaking</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Ion temperature (averaged over ion species and states) peaking factor, defined as the Ti value at the magnetic axis divided by the volume averaged Ti (average over the plasma volume up to the LCFS)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.v_loop</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V</p></td><td><p>LCFS loop voltage (positive value drives positive ohmic current that flows anti-clockwise when viewed from above)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.global_quantities.z_eff_resistive</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Volume average plasma effective charge, estimated from the flux consumption in the ohmic phase</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Interface Data Structure properties. This element identifies the node above as an IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.comment</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Any comment describing the content of this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.creation_date</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Date at which this data has been produced</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.homogeneous_time</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>This node must be filled (with 0, 1, or 2) for the IDS to be valid. If 1, the time of this IDS is homogeneous, i.e. the time values for this IDS are stored in the time node just below the root of this IDS. If 0, the time values are stored in the various time fields at lower levels in the tree. In the case only constant or static nodes are filled within the IDS, homogeneous_time must be set to 2</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>User-defined name for this IDS occurrence</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.occurrence</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p></p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.occurrence_type</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Type of data contained in this occurrence<br>1) reconstruction : Equilibrium reconstruction<br>2) prediction_fixed : Equilibrium prediction, fixed boundary<br>3) prediction_free : Equilibrium prediction, free boundary<br>4) mapping : Used for mapping equilibrium results from one grid type / resolution to another, or for including variables not present in the first set such as the calculation of magnetic field of other derived parameters</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.occurrence_type.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.occurrence_type.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.occurrence_type.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Information about the plugins used to write/read this IDS. This structure is filled automatically by the Access Layer at GET/PUT time, no need to fill it via a user program.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_get</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Plugin infrastructure used to GET the data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_get.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_get.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_get.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_get.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_get.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_put</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Plugin infrastructure used to PUT the data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_put.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_put.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_put.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_put.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.infrastructure_put.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of IDS nodes for which a plugin has been applied</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].get_operation</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins actually used to read back a node (potentially, multiple plugins can be applied, listed in reverse order of application). This information is filled by the plugin infrastructure during the GET operation.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].get_operation[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].get_operation[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].get_operation[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].get_operation[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].get_operation[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].get_operation[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the node within the IDS, following the syntax given in the link below. If empty, means the plugin applies to the whole IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].put_operation</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins used to PUT a node (potentially, multiple plugins can be applied, if so they are listed by order of application)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].put_operation[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].put_operation[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].put_operation[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].put_operation[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].put_operation[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].put_operation[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].readback</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Plugins to be used to read back a node (potentially, multiple plugins can be applied, listed in reverse order of application) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].readback[:].commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].readback[:].description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short description of the software (type, purpose)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].readback[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].readback[:].parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].readback[:].repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.plugins.node[:].readback[:].version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.provenance</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Provenance information about this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.provenance.node</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of IDS nodes for which the provenance is given. The provenance information applies to the whole structure below the IDS node. For documenting provenance information for the whole IDS, set the size of this array of structure to 1 and leave the child "path" node empty</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.provenance.node[:].path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the node within the IDS, following the syntax given in the link below. If empty, means the provenance information applies to the whole IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.provenance.node[:].sources</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>List of sources used to import or calculate this node, identified as explained below. In case the node is the result of of a calculation / data processing, the source is an input to the process described in the "code" structure at the root of the IDS. The source can be an IDS (identified by a URI or a persitent identifier, see syntax in the link below) or non-IDS data imported directly from an non-IMAS database (identified by the command used to import the source, or the persistent identifier of the data source). Often data are obtained by a chain of processes, however only the last process input are recorded here. The full chain of provenance has then to be reconstructed recursively from the provenance information contained in the data sources.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.provider</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the person in charge of producing this data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.source</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Source of the data (any comment describing the origin of the data : code, path to diagnostic signals, processing method, ...). Superseeded by the new provenance structure.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.version_put</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Version of the access layer package used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.version_put.access_layer</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Access Layer used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.version_put.access_layer_language</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Programming language of the Access Layer high level API used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.ids_properties.version_put.data_dictionary</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Data Dictionary used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Core plasma radial profiles for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].conductivity_parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>ohm^-1.m^-1</p></td><td><p>Parallel conductivity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].current_parallel_inside</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A</p></td><td><p>Parallel current driven inside the flux surface. Cumulative surface integral of j_total</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].e_field</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>V.m^-1</p></td><td><p>Electric field, averaged on the magnetic surface. E.g for the parallel component, average(E.B) / B0, using core_profiles/vacuum_toroidal_field/b0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].e_field.diamagnetic</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Diamagnetic component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].e_field.parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Parallel component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].e_field.poloidal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Poloidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].e_field.radial</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Radial component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].e_field.toroidal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Toroidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].e_field_parallel</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V.m^-1</p></td><td><p>Parallel electric field = average(E.B) / B0, where Core_Profiles/Vacuum_Toroidal_Field/ B0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Quantities related to the electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.collisionality_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Collisionality normalised to the bounce frequency</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fast</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3</p></td><td><p>Information on the fit used to obtain the density profile</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.chi_squared</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Squared error normalized by the weighted standard deviation considered in the minimization process : chi_squared = weight^2 *(reconstructed - measured)^2 / sigma^2, where sigma is the standard deviation of the measurement error</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.local</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.density_fit.measured]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Integer flag : 1 means local measurement, 0 means line-integrated measurement</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].electrons.density_fit.measured</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Measured values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the fit specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.reconstructed</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Value reconstructed from the fit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.rho_tor_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate of each measurement (local value for a local measurement, minimum value reached by the line of sight for a line measurement)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.source</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.density_fit.measured]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Path to the source data for each measurement in the IMAS data dictionary, e.g. ece/channel(i)/t_e for the electron temperature on the i-th channel in the ECE IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.time_measurement</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Exact time slices used from the time array of the measurement source data. If the time slice does not exist in the time array of the source data, it means linear interpolation has been used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.time_measurement_slice_method</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Method used to slice the data : index = 0 means using exact time slice of the measurement, 1 means linear interpolation, ...</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.time_measurement_slice_method.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.time_measurement_slice_method.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.time_measurement_slice_method.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.time_measurement_width</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>In case the measurements are averaged over a time interval, this node is the full width of this time interval (empty otherwise). In case the slicing/averaging method doesn't use a hard time interval cutoff, this width is the characteristic time span of the slicing/averaging method. By convention, the time interval starts at time_measurement-time_width and ends at time_measurement.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_fit.weight</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Weight given to each measured value</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of thermal particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.density_validity</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Indicator of the validity of the density profile. 0: valid from automated processing, 1: valid and certified by the RO; - 1 means problem identified in the data processing (request verification by the RO), -2: invalid data, should not be used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.pressure</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.pressure_fast_parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.pressure_fast_perpendicular</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.pressure_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal) associated with random motion ~average((v-average(v))^2) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Information on the fit used to obtain the temperature profile</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.chi_squared</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Squared error normalized by the weighted standard deviation considered in the minimization process : chi_squared = weight^2 *(reconstructed - measured)^2 / sigma^2, where sigma is the standard deviation of the measurement error</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.local</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.temperature_fit.measured]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Integer flag : 1 means local measurement, 0 means line-integrated measurement</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].electrons.temperature_fit.measured</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Measured values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the fit specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.reconstructed</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Value reconstructed from the fit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.rho_tor_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate of each measurement (local value for a local measurement, minimum value reached by the line of sight for a line measurement)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.source</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.temperature_fit.measured]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Path to the source data for each measurement in the IMAS data dictionary, e.g. ece/channel(i)/t_e for the electron temperature on the i-th channel in the ECE IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.time_measurement</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Exact time slices used from the time array of the measurement source data. If the time slice does not exist in the time array of the source data, it means linear interpolation has been used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.time_measurement_slice_method</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Method used to slice the data : index = 0 means using exact time slice of the measurement, 1 means linear interpolation, ...</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.time_measurement_slice_method.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.time_measurement_slice_method.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.time_measurement_slice_method.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.time_measurement_width</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>In case the measurements are averaged over a time interval, this node is the full width of this time interval (empty otherwise). In case the slicing/averaging method doesn't use a hard time interval cutoff, this width is the characteristic time span of the slicing/averaging method. By convention, the time interval starts at time_measurement-time_width and ends at time_measurement.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_fit.weight</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].electrons.temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Weight given to each measured value</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.temperature_validity</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Indicator of the validity of the temperature profile. 0: valid from automated processing, 1: valid and certified by the RO; - 1 means problem identified in the data processing (request verification by the RO), -2: invalid data, should not be used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.velocity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m.s^-1</p></td><td><p>Velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.velocity.diamagnetic</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Diamagnetic component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.velocity.parallel</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Parallel component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.velocity.poloidal</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.velocity.radial</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Radial component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.velocity.toroidal</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.velocity_pol</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].electrons.velocity_tor</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Radial grid</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid.area</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2</p></td><td><p>Cross-sectional area of the flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid.psi</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Wb</p></td><td><p>Poloidal magnetic flux</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid.psi_boundary</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Wb</p></td><td><p>Value of the poloidal magnetic flux at the plasma boundary (useful to normalize the psi array values when the radial grid doesn't go from the magnetic axis to the plasma boundary)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid.psi_magnetic_axis</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Wb</p></td><td><p>Value of the poloidal magnetic flux at the magnetic axis (useful to normalize the psi array values when the radial grid doesn't go from the magnetic axis to the plasma boundary)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid.rho_pol_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised poloidal flux coordinate = sqrt((psi(rho)-psi(magnetic_axis)) / (psi(LCFS)-psi(magnetic_axis)))</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid.rho_tor</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Toroidal flux coordinate. rho_tor = sqrt(b_flux_tor/(pi*b0)) ~ sqrt(pi*r^2*b0/(pi*b0)) ~ r [m]. The toroidal field used in its definition is indicated under vacuum_toroidal_field/b0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].grid.rho_tor_norm</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate. The normalizing value for rho_tor_norm, is the toroidal flux coordinate at the equilibrium boundary (LCFS or 99.x % of the LCFS in case of a fixed boundary equilibium calculation, see time_slice/boundary/b_flux_pol_norm in the equilibrium IDS) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid.surface</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^2</p></td><td><p>Surface area of the toroidal flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].grid.volume</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^3</p></td><td><p>Volume enclosed inside the magnetic surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].ion</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different ion species, in the sense of isonuclear or isomolecular sequences. Ionisation states (or other types of states) must be differentiated at the state level below</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fast</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3</p></td><td><p>Information on the fit used to obtain the density profile</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.chi_squared</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Squared error normalized by the weighted standard deviation considered in the minimization process : chi_squared = weight^2 *(reconstructed - measured)^2 / sigma^2, where sigma is the standard deviation of the measurement error</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.local</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].density_fit.measured]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Integer flag : 1 means local measurement, 0 means line-integrated measurement</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].ion[:].density_fit.measured</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Measured values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the fit specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.reconstructed</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Value reconstructed from the fit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.rho_tor_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate of each measurement (local value for a local measurement, minimum value reached by the line of sight for a line measurement)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.source</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].density_fit.measured]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Path to the source data for each measurement in the IMAS data dictionary, e.g. ece/channel(i)/t_e for the electron temperature on the i-th channel in the ECE IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.time_measurement</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Exact time slices used from the time array of the measurement source data. If the time slice does not exist in the time array of the source data, it means linear interpolation has been used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.time_measurement_slice_method</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Method used to slice the data : index = 0 means using exact time slice of the measurement, 1 means linear interpolation, ...</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.time_measurement_slice_method.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.time_measurement_slice_method.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.time_measurement_slice_method.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.time_measurement_width</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>In case the measurements are averaged over a time interval, this node is the full width of this time interval (empty otherwise). In case the slicing/averaging method doesn't use a hard time interval cutoff, this width is the characteristic time span of the slicing/averaging method. By convention, the time interval starts at time_measurement-time_width and ends at time_measurement.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_fit.weight</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Weight given to each measured value</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].density_validity</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Indicator of the validity of the density profile. 0: valid from automated processing, 1: valid and certified by the RO; - 1 means problem identified in the data processing (request verification by the RO), -2: invalid data, should not be used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].element</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].element[:].a</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].element[:].atoms_n</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].element[:].z_n</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].label</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying ion (e.g. H, D, T, He, C, D2, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].multiple_states_flag</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple states calculation flag : 0-Only the 'ion' level is considered and the 'state' array of structure is empty; 1-Ion states are considered and are described in the 'state' array of structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].neutral_index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the corresponding neutral species in the ../../neutral array</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].pressure</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].pressure_fast_parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure  (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].pressure_fast_perpendicular</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].pressure_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal) associated with random motion ~average((v-average(v))^2) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].rotation_frequency_tor</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>rad.s^-1</p></td><td><p>Toroidal rotation frequency  (i.e. toroidal velocity divided by the major radius at which the toroidal velocity is taken) (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different states of the species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fast</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m^-3</p></td><td><p>Information on the fit used to obtain the density profile</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.chi_squared</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Squared error normalized by the weighted standard deviation considered in the minimization process : chi_squared = weight^2 *(reconstructed - measured)^2 / sigma^2, where sigma is the standard deviation of the measurement error</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.local</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Integer flag : 1 means local measurement, 0 means line-integrated measurement</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Measured values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the fit specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.reconstructed</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Value reconstructed from the fit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.rho_tor_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate of each measurement (local value for a local measurement, minimum value reached by the line of sight for a line measurement)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.source</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Path to the source data for each measurement in the IMAS data dictionary, e.g. ece/channel(i)/t_e for the electron temperature on the i-th channel in the ECE IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.time_measurement</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Exact time slices used from the time array of the measurement source data. If the time slice does not exist in the time array of the source data, it means linear interpolation has been used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.time_measurement_slice_method</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Method used to slice the data : index = 0 means using exact time slice of the measurement, 1 means linear interpolation, ...</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.time_measurement_slice_method.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.time_measurement_slice_method.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.time_measurement_slice_method.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.time_measurement_width</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>In case the measurements are averaged over a time interval, this node is the full width of this time interval (empty otherwise). In case the slicing/averaging method doesn't use a hard time interval cutoff, this width is the characteristic time span of the slicing/averaging method. By convention, the time interval starts at time_measurement-time_width and ends at time_measurement.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_fit.weight</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].state[:].density_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Weight given to each measured value</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].density_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of thermal particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].electron_configuration</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].ionisation_potential</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>eV</p></td><td><p>Cumulative and average ionisation potential to reach a given bundle. Defined as sum (x_z* (sum of Epot from z'=0 to z-1)), where Epot is the ionisation potential of ion Xz’+, and x_z is the relative concentration of a given charge state in the bundle, i.e. sum(x_z) = 1 over the bundle.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].label</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].pressure</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].pressure_fast_parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].pressure_fast_perpendicular</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].pressure_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal) associated with random motion ~average((v-average(v))^2)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].rotation_frequency_tor</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>rad.s^-1</p></td><td><p>Toroidal rotation frequency (i.e. toroidal velocity divided by the major radius at which the toroidal velocity is taken)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].temperature</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].velocity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m.s^-1</p></td><td><p>Velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].velocity.diamagnetic</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Diamagnetic component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].velocity.parallel</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Parallel component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].velocity.poloidal</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].velocity.radial</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Radial component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].velocity.toroidal</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].vibrational_level</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].vibrational_mode</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].z_average</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Average Z of the charge state bundle, volume averaged over the plasma radius (equal to z_min if no bundle), = sum (Z*x_z) where x_z is the relative concentration of a given charge state in the bundle, i.e. sum(x_z) = 1 over the bundle.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].z_average_1d</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Average charge profile of the charge state bundle (equal to z_min if no bundle), = sum (Z*x_z) where x_z is the relative concentration of a given charge state in the bundle, i.e. sum(x_z) = 1 over the bundle.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].z_average_square_1d</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Average square charge profile of the charge state bundle (equal to z_min squared if no bundle), = sum (Z^2*x_z) where x_z is the relative concentration of a given charge state in the bundle, i.e. sum(x_z) = 1 over the bundle.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].z_max</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle (equal to z_min if no bundle)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].z_min</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].state[:].z_square_average</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Average Z square of the charge state bundle, volume averaged over the plasma radius (equal to z_min squared if no bundle), = sum (Z^2*x_z) where x_z is the relative concentration of a given charge state in the bundle, i.e. sum(x_z) = 1 over the bundle.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Information on the fit used to obtain the temperature profile</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.chi_squared</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Squared error normalized by the weighted standard deviation considered in the minimization process : chi_squared = weight^2 *(reconstructed - measured)^2 / sigma^2, where sigma is the standard deviation of the measurement error</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.local</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].temperature_fit.measured]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Integer flag : 1 means local measurement, 0 means line-integrated measurement</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].ion[:].temperature_fit.measured</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Measured values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the fit specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.reconstructed</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Value reconstructed from the fit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.rho_tor_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate of each measurement (local value for a local measurement, minimum value reached by the line of sight for a line measurement)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.source</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].temperature_fit.measured]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Path to the source data for each measurement in the IMAS data dictionary, e.g. ece/channel(i)/t_e for the electron temperature on the i-th channel in the ECE IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.time_measurement</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Exact time slices used from the time array of the measurement source data. If the time slice does not exist in the time array of the source data, it means linear interpolation has been used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.time_measurement_slice_method</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Method used to slice the data : index = 0 means using exact time slice of the measurement, 1 means linear interpolation, ...</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.time_measurement_slice_method.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.time_measurement_slice_method.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.time_measurement_slice_method.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.time_measurement_width</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>In case the measurements are averaged over a time interval, this node is the full width of this time interval (empty otherwise). In case the slicing/averaging method doesn't use a hard time interval cutoff, this width is the characteristic time span of the slicing/averaging method. By convention, the time interval starts at time_measurement-time_width and ends at time_measurement.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_fit.weight</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].ion[:].temperature_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Weight given to each measured value</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].temperature_validity</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Indicator of the validity of the temperature profile. 0: valid from automated processing, 1: valid and certified by the RO; - 1 means problem identified in the data processing (request verification by the RO), -2: invalid data, should not be used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].velocity</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m.s^-1</p></td><td><p>Velocity (average over charge states when multiple charge states are considered) at the position of maximum major radius on every flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].velocity.diamagnetic</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Diamagnetic component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].velocity.parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Parallel component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].velocity.poloidal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].velocity.radial</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Radial component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].velocity.toroidal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].velocity_pol</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].velocity_tor</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].z_ion</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed), volume averaged over plasma radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].z_ion_1d</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Average charge of the ion species (sum of states charge weighted by state density and divided by ion density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].ion[:].z_ion_square_1d</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Average square charge of the ion species (sum of states square charge weighted by state density and divided by ion density)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].j_bootstrap</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A/m^2</p></td><td><p>Bootstrap current density = average(J_Bootstrap.B) / B0, where B0 = Core_Profiles/Vacuum_Toroidal_Field/ B0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].j_non_inductive</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A/m^2</p></td><td><p>Non-inductive (includes bootstrap) parallel current density = average(jni.B) / B0, where B0 = Core_Profiles/Vacuum_Toroidal_Field/ B0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].j_ohmic</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A/m^2</p></td><td><p>Ohmic parallel current density = average(J_Ohmic.B) / B0, where B0 = Core_Profiles/Vacuum_Toroidal_Field/ B0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].j_tor</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A/m^2</p></td><td><p>Total toroidal current density = average(J_Tor/R) / average(1/R)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].j_total</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A/m^2</p></td><td><p>Total parallel current density = average(jtot.B) / B0, where B0 = Core_Profiles/Vacuum_Toroidal_Field/ B0</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].magnetic_shear</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Magnetic shear, defined as rho_tor/q . dq/drho_tor</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].momentum_tor</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>kg.m^-1.s^-1</p></td><td><p>Total plasma toroidal momentum, summed over ion species and electrons weighted by their density and major radius, i.e. sum_over_species(n*R*m*Vphi)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].n_i_thermal_total</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Total ion thermal density (sum over species and charge states)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].n_i_total_over_n_e</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Ratio of total ion density (sum over species and charge states) over electron density. (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different neutral species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].density</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].density_fast</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].density_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].element</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].element[:].a</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].element[:].atoms_n</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].element[:].z_n</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].ion_index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the corresponding ion species in the ../../ion array</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].label</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying the species (e.g. H, D, T, He, C, D2, DT, CD4, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].multiple_states_flag</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple states calculation flag : 0-Only one state is considered; 1-Multiple states are considered and are described in the state structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].pressure</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].pressure_fast_parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure  (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].pressure_fast_perpendicular</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].pressure_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal) associated with random motion ~average((v-average(v))^2) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different states of the species (energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].density</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].density_fast</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].density_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of thermal particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].electron_configuration</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].label</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying state</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].neutral_type</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Neutral type (if the considered state is a neutral), in terms of energy. ID =1: cold; 2: thermal; 3: fast; 4: NBI<br>1) cold : Cold neutrals<br>2) thermal : Thermal neutrals<br>3) fast : Fast neutrals<br>4) nbi : NBI neutrals</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].neutral_type.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].neutral_type.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].neutral_type.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].pressure</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].pressure_fast_parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].pressure_fast_perpendicular</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].pressure_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal) associated with random motion ~average((v-average(v))^2)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].temperature</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].velocity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m.s^-1</p></td><td><p>Velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].velocity.diamagnetic</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Diamagnetic component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].velocity.parallel</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Parallel component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].velocity.poloidal</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].velocity.radial</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Radial component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].velocity.toroidal</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].vibrational_level</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].state[:].vibrational_mode</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].temperature</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].velocity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m.s^-1</p></td><td><p>Velocity (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].velocity.diamagnetic</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Diamagnetic component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].velocity.parallel</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Parallel component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].velocity.poloidal</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].velocity.radial</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Radial component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].neutral[:].velocity.toroidal</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].phi_potential</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>V</p></td><td><p>Electrostatic potential, averaged on the magnetic flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].pressure_ion_total</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total (sum over ion species) thermal ion pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].pressure_parallel</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total parallel pressure (electrons+ions, thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].pressure_perpendicular</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total perpendicular pressure (electrons+ions, thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].pressure_thermal</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>Pa</p></td><td><p>Thermal pressure (electrons+ions)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].q</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Safety factor (IMAS uses COCOS=11: only positive when toroidal current and magnetic field are in same direction)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].rotation_frequency_tor_sonic</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Derivative of the flux surface averaged electrostatic potential with respect to the poloidal flux, multiplied by -1. This quantity is the toroidal angular rotation frequency due to the ExB drift, introduced in formula (43) of Hinton and Wong, Physics of Fluids 3082 (1985), also referred to as sonic flow in regimes in which the toroidal velocity is dominant over the poloidal velocity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Ion temperature (averaged on charge states and ion species)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>eV</p></td><td><p>Information on the fit used to obtain the t_i_average profile</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.chi_squared</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].t_i_average_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Squared error normalized by the weighted standard deviation considered in the minimization process : chi_squared = weight^2 *(reconstructed - measured)^2 / sigma^2, where sigma is the standard deviation of the measurement error</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.local</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].t_i_average_fit.measured]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Integer flag : 1 means local measurement, 0 means line-integrated measurement</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].t_i_average_fit.measured</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Measured values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the fit specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.reconstructed</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].t_i_average_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>eV</p></td><td><p>Value reconstructed from the fit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.rho_tor_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].t_i_average_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate of each measurement (local value for a local measurement, minimum value reached by the line of sight for a line measurement)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.source</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].t_i_average_fit.measured]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Path to the source data for each measurement in the IMAS data dictionary, e.g. ece/channel(i)/t_e for the electron temperature on the i-th channel in the ECE IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.time_measurement</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].t_i_average_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Exact time slices used from the time array of the measurement source data. If the time slice does not exist in the time array of the source data, it means linear interpolation has been used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.time_measurement_slice_method</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Method used to slice the data : index = 0 means using exact time slice of the measurement, 1 means linear interpolation, ...</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.time_measurement_slice_method.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.time_measurement_slice_method.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.time_measurement_slice_method.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.time_measurement_width</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].t_i_average_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>In case the measurements are averaged over a time interval, this node is the full width of this time interval (empty otherwise). In case the slicing/averaging method doesn't use a hard time interval cutoff, this width is the characteristic time span of the slicing/averaging method. By convention, the time interval starts at time_measurement-time_width and ends at time_measurement.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].t_i_average_fit.weight</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].t_i_average_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Weight given to each measured value</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].time</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].grid.rho_tor_norm]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Effective charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>-</p></td><td><p>Information on the fit used to obtain the zeff profile</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.chi_squared</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].zeff_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Squared error normalized by the weighted standard deviation considered in the minimization process : chi_squared = weight^2 *(reconstructed - measured)^2 / sigma^2, where sigma is the standard deviation of the measurement error</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.local</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].zeff_fit.measured]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Integer flag : 1 means local measurement, 0 means line-integrated measurement</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_1d[:].zeff_fit.measured</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Measured values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.parameters</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the fit specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.reconstructed</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].zeff_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Value reconstructed from the fit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.rho_tor_norm</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].zeff_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Normalised toroidal flux coordinate of each measurement (local value for a local measurement, minimum value reached by the line of sight for a line measurement)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.source</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].zeff_fit.measured]</p></td><td><p>STR_1D</p></td><td><p></p></td><td><p>Path to the source data for each measurement in the IMAS data dictionary, e.g. ece/channel(i)/t_e for the electron temperature on the i-th channel in the ECE IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.time_measurement</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].zeff_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>Exact time slices used from the time array of the measurement source data. If the time slice does not exist in the time array of the source data, it means linear interpolation has been used</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.time_measurement_slice_method</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Method used to slice the data : index = 0 means using exact time slice of the measurement, 1 means linear interpolation, ...</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.time_measurement_slice_method.description</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.time_measurement_slice_method.index</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.time_measurement_slice_method.name</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.time_measurement_width</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].zeff_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s</p></td><td><p>In case the measurements are averaged over a time interval, this node is the full width of this time interval (empty otherwise). In case the slicing/averaging method doesn't use a hard time interval cutoff, this width is the characteristic time span of the slicing/averaging method. By convention, the time interval starts at time_measurement-time_width and ends at time_measurement.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_1d[:].zeff_fit.weight</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_1d[:].zeff_fit.measured]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Weight given to each measured value</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Core plasma quantities in a poloidal cross section, for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].grid</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Definition of the 2D grid (the content of dim1 and dim2 is defined by the selected grid_type)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_2d[:].grid.dim1</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>First dimension values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_2d[:].grid.dim2</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Second dimension values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].grid.volume_element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^3</p></td><td><p>Elementary plasma volume of plasma enclosed in the cell formed by the nodes [dim1(i) dim2(j)], [dim1(i+1) dim2(j)], [dim1(i) dim2(j+1)] and [dim1(i+1) dim2(j+1)]</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].grid_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Selection of one of a set of grid types<br>1) rectangular : Cylindrical R,Z ala eqdsk (R=dim1, Z=dim2). In this case the position arrays should not be filled since they are redundant with grid/dim1 and dim2.<br>2) inverse : Rhopolar_polar 2D polar coordinates (rho=dim1, theta=dim2) with magnetic axis as centre of grid; theta and values following the COCOS=11 convention; the polar angle is theta=atan2(z-zaxis,r-raxis)<br>11) inverse_psi_straight_field_line : Flux surface type with psi as radial label (dim1) and the straight-field line poloidal angle (mod(index,10)=1) (dim2); could be non-equidistant; magnetic axis as centre of grid; following the COCOS=11 convention<br>12) inverse_psi_equal_arc : Flux surface type with psi as radial label (dim1) and the equal arc poloidal angle (mod(index,10)=2) (dim2)<br>13) inverse_psi_polar : Flux surface type with psi as radial label (dim1) and the polar poloidal angle (mod(index,10)=3) (dim2); could be non-equidistant<br>14) inverse_psi_straight_field_line_fourier : Flux surface type with psi as radial label (dim1) and Fourier modes in the straight-field line poloidal angle (mod(index,10)=4) (dim2), could be non-equidistant; magnetic axis as centre of grid; following the COCOS=11 convention<br>15) inverse_psi_equal_arc_fourier : Flux surface type with psi as radial label (dim1) and Fourier modes in the equal arc poloidal angle (mod(index,10)=5) (dim2)<br>16) inverse_psi_polar_fourier : Flux surface type with psi as radial label (dim1) and Fourier modes in the polar poloidal angle (mod(index,10)=6) (dim2); could be non-equidistant<br>21) inverse_rhopolnorm_straight_field_line : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] (dim1) and the straight-field line poloidal angle (dim2)<br>22) inverse_rhopolnorm_equal_arc : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] (dim1) and the equal arc poloidal angle (dim2)<br>23) inverse_rhopolnorm_polar : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] (dim1) and the polar poloidal angle (dim2)<br>24) inverse_rhopolnorm_straight_field_line_fourier : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] (dim1) and Fourier modes in the straight-field line poloidal angle (dim2)<br>25) inverse_rhopolnorm_equal_arc_fourier : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] (dim1) and Fourier modes in the equal arc poloidal angle (dim2)<br>26) inverse_rhopolnorm_polar_fourier : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] (dim1) and Fourier modes in the polar poloidal angle (dim2)<br>31) inverse_rhotornorm_straight_field_line : Flux surface type with radial label sqrt[Phi/Phi_edge] (dim1) and the straight-field line poloidal angle (dim2)<br>32) inverse_rhotornorm_equal_arc : Flux surface type with radial label sqrt[Phi/Phi_edge] (dim1) and the equal arc poloidal angle (dim2)<br>33) inverse_rhotornorm_polar : Flux surface type with radial label sqrt[Phi/Phi_edge] (dim1) and the polar poloidal angle (dim2)<br>34) inverse_rhotornorm_straight_field_line_fourier : Flux surface type with radial label sqrt[Phi/Phi_edge] (dim1) and Fourier modes in the straight-field line poloidal angle (dim2)<br>35) inverse_rhotornorm_equal_arc_fourier : Flux surface type with radial label sqrt[Phi/Phi_edge] (dim1) and Fourier modes in the equal arc poloidal angle (dim2)<br>36) inverse_rhotornorm_polar_fourier : Flux surface type with radial label sqrt[Phi/Phi_edge] (dim1) and Fourier modes in the polar poloidal angle (dim2)<br>41) inverse_rhopol_straight_field_line : Flux surface type with radial label sqrt[psi-psi_axis] (dim1) and the straight-field line poloidal angle (dim2)<br>42) inverse_rhopol_equal_arc : Flux surface type with radial label sqrt[psi-psi_axis] (dim1) and the equal arc poloidal angle (dim2)<br>43) inverse_rhopol_polar : Flux surface type with radial label sqrt[psi-psi_axis] (dim1) and the polar poloidal angle (dim2)<br>44) inverse_rhopol_straight_field_line_fourier : Flux surface type with radial label sqrt[psi-psi_axis] (dim1) and Fourier modes in the straight-field line poloidal angle (dim2)<br>45) inverse_rhopol_equal_arc_fourier : Flux surface type with radial label sqrt[psi-psi_axis] (dim1) and Fourier modes in the equal arc poloidal angle (dim2)<br>46) inverse_rhopol_polar_fourier : Flux surface type with radial label sqrt[psi-psi_axis] (dim1) and Fourier modes in the polar poloidal angle (dim2)<br>51) inverse_rhotor_straight_field_line : Flux surface type with radial label sqrt[Phi/pi/B0] (dim1), Phi being toroidal flux, and the straight-field line poloidal angle (dim2)<br>52) inverse_rhotor_equal_arc : Flux surface type with radial label sqrt[Phi/pi/B0] (dim1), Phi being toroidal flux, and the equal arc poloidal angle (dim2)<br>53) inverse_rhotor_polar : Flux surface type with radial label sqrt[Phi/pi/B0] (dim1), Phi being toroidal flux, and the polar poloidal angle (dim2)<br>54) inverse_rhotor_straight_field_line_fourier : Flux surface type with radial label sqrt[Phi/pi/B0] (dim1), Phi being toroidal flux, and Fourier modes in the straight-field line poloidal angle (dim2)<br>55) inverse_rhotor_equal_arc_fourier : Flux surface type with radial label sqrt[Phi/pi/B0] (dim1), Phi being toroidal flux, and Fourier modes in the equal arc poloidal angle (dim2)<br>56) inverse_rhotor_polar_fourier : Flux surface type with radial label sqrt[Phi/pi/B0] (dim1), Phi being toroidal flux, and Fourier modes in the polar poloidal angle (dim2)<br>91) irregular_rz_na : Irregular grid, thus give list of vertices in dim1(1:ndim1), dim2(1:ndim1) and then all fields are on values(1:ndim1,1)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].grid_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].grid_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].grid_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>2D quantities related to the different ion species, in the sense of isonuclear or isomolecular sequences. Ionisation states (or other types of states) must be differentiated at the state level below. This array doesn't necessarily have the same size as the profiles_1d/ion array, since 2D data may be relevant only for a subset of ion species.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].element[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].element[:].atoms_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].element[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].ion_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the corresponding ion species in the ../../../profiles_1d/ion array</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying ion (e.g. H, D, T, He, C, D2, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].multiple_states_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Multiple states calculation flag : 0-Only the 'ion' level is considered and the 'state' array of structure is empty; 1-Ion states are considered and are described in the 'state' array of structure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure  (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].pressure_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal) associated with random motion ~average((v-average(v))^2) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].rotation_frequency_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>rad.s^-1</p></td><td><p>Toroidal rotation frequency  (i.e. toroidal velocity divided by the major radius at which the toroidal velocity is taken) (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Quantities related to the different states of the species (ionisation, energy, excitation, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].density_fast</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of fast (non-thermal) particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of thermal particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].electron_configuration</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Configuration of atomic orbitals of this state, e.g. 1s2-2s1</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].ionisation_potential</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>eV</p></td><td><p>Cumulative and average ionisation potential to reach a given bundle. Defined as sum (x_z* (sum of Epot from z'=0 to z-1)), where Epot is the ionisation potential of ion Xz’+, and x_z is the relative concentration of a given charge state in the bundle, i.e. sum(x_z) = 1 over the bundle.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying state (e.g. C+, C+2 , C+3, C+4, C+5, C+6, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].pressure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].pressure_fast_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) parallel pressure </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].pressure_fast_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Fast (non-thermal) perpendicular pressure  </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].pressure_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Pressure (thermal) associated with random motion ~average((v-average(v))^2)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].rotation_frequency_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>rad.s^-1</p></td><td><p>Toroidal rotation frequency (i.e. toroidal velocity divided by the major radius at which the toroidal velocity is taken)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].vibrational_level</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Vibrational level (can be bundled)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].vibrational_mode</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Vibrational mode of this state, e.g. "A_g". Need to define, or adopt a standard nomenclature.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].z_average</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Average Z of the charge state bundle, volume averaged over the plasma radius (equal to z_min if no bundle), = sum (Z*x_z) where x_z is the relative concentration of a given charge state in the bundle, i.e. sum(x_z) = 1 over the bundle.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].z_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Maximum Z of the charge state bundle (equal to z_min if no bundle)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].z_min</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Minimum Z of the charge state bundle</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].state[:].z_square_average</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Average Z square of the charge state bundle, volume averaged over the plasma radius (equal to z_min squared if no bundle), = sum (Z^2*x_z) where x_z is the relative concentration of a given charge state in the bundle, i.e. sum(x_z) = 1 over the bundle.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].velocity</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p>m.s^-1</p></td><td><p>Velocity (average over charge states when multiple charge states are considered) at the position of maximum major radius on every flux surface</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].velocity.diamagnetic</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Diamagnetic component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].velocity.parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Parallel component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].velocity.poloidal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Poloidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].velocity.radial</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Radial component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].velocity.toroidal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m.s^-1</p></td><td><p>Toroidal component</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed), volume averaged over plasma radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].momentum_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>kg.m^-1.s^-1</p></td><td><p>Total plasma toroidal momentum, summed over ion species and electrons weighted by their density and major radius, i.e. sum_over_species(n*R*m*Vphi)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].n_i_thermal_total</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Total ion thermal density (sum over species and charge states)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].n_i_total_over_n_e</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Ratio of total ion density (sum over species and charge states) over electron density. (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].pressure_ion_total</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total (sum over ion species) thermal ion pressure</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].pressure_parallel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total parallel pressure (electrons+ions, thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].pressure_perpendicular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Total perpendicular pressure (electrons+ions, thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].pressure_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>Pa</p></td><td><p>Thermal pressure (electrons+ions)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].t_i_average</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>eV</p></td><td><p>Ion temperature (averaged on states and ion species)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.profiles_2d[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.profiles_2d[:].zeff</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.profiles_2d[:].grid.dim1,<br> core_profiles.profiles_2d[:].grid.dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Effective charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.statistics[:].time]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Statistics for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of 2D quantities on which statistics are provided. 2D means 1D+time dimension, so either a 1D quantity within a dynamic array of structure, or a 2D dynamic quantity outside of an array of structure. Therefore the resulting statistical value is 1D for a given statistics time slice. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].distribution</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Probability distribution function of the quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].distribution.bins</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>Bins of quantitiy values, defined for each element (first dimension) corresponding to the first dimension of the original 2D quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].distribution.probability</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Probability to have a value of the quantity between bins(n) and bins(n+1) (thus the size of its second dimension is the size of the second dimension of the bins array - 1). The first dimension correspond to the first dimension of the original 2D quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the quantity within the IDS, following the syntax given in the link below</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>Set of statistics types applied to the quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Only if the statistics value is given on a different GGD grid subset than the original quantity (e.g. if the statistics has worked over a dimension of the GGD), index of the grid used to represent the statistics value</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Only if the statistics value is given on a different GGD grid subset than the original quantity (e.g. if the statistics has worked over a dimension of the GGD), index of the new grid subset the statistics value is provided on. Corresponds to the index used in the grid subset definition: grid_subset(:)/identifier/index</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Identifier of the statistics type<br>1) mean : Mean<br>2) sigma : Standard deviation<br>3) skewness : Skewness<br>4) kurtosis : Pearson (full) kurtosis<br>5) sobol_1 : First order Sobol index<br>6) percentile_10 : 10% percentile<br>7) percentile_90 : 90% percentile</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type[:].uq_input_path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>For Sobol index only, path to the related the uq_input quantity, e.g. ../../../uq_input_2d(3) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].quantity_2d[:].statistics_type[:].value</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Value of the statistics for that quantity, the array corresponding to the first dimension of the original 2D quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.statistics[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].time_width</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>s</p></td><td><p>Width of the time interval over which the statistics have been calculated. By convention, the time interval starts at time-time_width and ends at time.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].uq_input_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>STRUCT_ARRAY</p></td><td><p></p></td><td><p>If the statistics are based on an uncertainty quantification process, set of 2D input quantities that are varied</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].uq_input_2d[:].distribution</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Probability distribution function of the quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].uq_input_2d[:].distribution.bins</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>mixed</p></td><td><p>Bins of quantitiy values, defined for each element (first dimension) corresponding to the first dimension of the original 2D quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].uq_input_2d[:].distribution.probability</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Probability to have a value of the quantity between bins(n) and bins(n+1) (thus the size of its second dimension is the size of the second dimension of the bins array - 1). The first dimension correspond to the first dimension of the original 2D quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.statistics[:].uq_input_2d[:].path</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Path of the quantity within the IDS, following the syntax given in the link below</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>core_profiles.time</strong></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D_TYPE</p></td><td><p>s</p></td><td><p>Generic time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.vacuum_toroidal_field</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STRUCTURE</p></td><td><p></p></td><td><p>Characteristics of the vacuum toroidal field (used in rho_tor definition and in the normalization of current densities)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.vacuum_toroidal_field.b0</p></td><td style="word-wrap:break-word;word-break:break-all"><p>[core_profiles.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>T</p></td><td><p>Vacuum toroidal field at R0 [T]; Positive sign means anti-clockwise when viewing from above. The product R0B0 must be consistent with the b_tor_vacuum_r field of the tf IDS.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>core_profiles.vacuum_toroidal_field.r0</p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>m</p></td><td><p>Reference major radius where the vacuum toroidal magnetic field is given (usually a fixed position such as the middle of the vessel at the equatorial midplane)</p></td></tr>
   </table>
   </table><p></p>
