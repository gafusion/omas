
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/omas_resample.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_omas_resample.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_omas_resample.py:


Interpolate whole ODS
=====================
Seamless handling of coordinates within OMAS makes it easy to reinterpolate a whole ODS on a new grid

.. GENERATED FROM PYTHON SOURCE LINES 8-30

.. code-block:: default


    import numpy
    from omas import *

    # original ODS
    ods = ODS()
    ods.sample_equilibrium()

    # interpolated ODS
    ods_interpolated = ODS()

    # define new psi grid of ods_interpolated
    new_psi = numpy.linspace(ods['equilibrium.time_slice.0.profiles_1d.psi'][0], ods['equilibrium.time_slice.0.profiles_1d.psi'][-1], 21)
    ods_interpolated['equilibrium.time_slice.0.profiles_1d.psi'] = new_psi

    # interpolate whole ods on new psi grid
    with omas_environment(ods_interpolated, coordsio=ods):
        ods_interpolated.update(ods)

    # print some quantity from interpolated ods
    assert len(ods_interpolated['equilibrium.time_slice.0.profiles_1d.pressure']) == 21
    print(ods_interpolated['equilibrium.time_slice.0.profiles_1d.pressure'])


.. _sphx_glr_download_auto_examples_omas_resample.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: omas_resample.py <omas_resample.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: omas_resample.ipynb <omas_resample.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
