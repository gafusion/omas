{
 "__cocos_rules__": {},
 "__include__": [
  "_common",
  "_efit"
 ],
 "__mdsserver__": "atlas.gat.com:8000",
 "__options__": {
  "EFIT_run_id": null,
  "EFIT_tree": "EFIT01",
  "PROFILES_run_id": null,
  "PROFILES_tree": "ZIPFIT01",
  "analysis_type": "CERQUICK",
  "default_tree": "D3D",
  "fast_ece": false,
  "get_all": true,
  "nref": 0,
  "revision": "BLESSED"
 },
 "bolometer.channel.:": {
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.etendue": {
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.identifier": {
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.line_of_sight.first_point.phi": {
  "COCOSIO": 11,
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.line_of_sight.first_point.r": {
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.line_of_sight.first_point.z": {
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.line_of_sight.second_point.phi": {
  "COCOSIO": 11,
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.line_of_sight.second_point.r": {
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.line_of_sight.second_point.z": {
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.name": {
  "PYTHON": "bolometer_hardware(ods, {pulse})"
 },
 "bolometer.channel.:.power.data": {
  "PYTHON": "bolometer_data(ods, {pulse})"
 },
 "bolometer.channel.:.power.data_error_upper": {
  "PYTHON": "bolometer_data(ods, {pulse})"
 },
 "bolometer.channel.:.power.time": {
  "PYTHON": "bolometer_data(ods, {pulse})"
 },
 "charge_exchange.channel.:": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.identifier": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.ion.:": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.ion.:.t_i.data": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.ion.:.t_i.time": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.name": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.position.phi.data": {
  "COCOSIO": 11,
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.position.phi.time": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.position.r.data": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.position.r.time": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.position.z.data": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.position.z.time": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.zeff.data": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "charge_exchange.channel.:.zeff.time": {
  "PYTHON": "charge_exchange_data(ods, {pulse}, {analysis_type!r})"
 },
 "coils_non_axisymmetric.coil.:": {
  "PYTHON": "coils_non_axisymmetric_hardware(ods, {pulse})"
 },
 "coils_non_axisymmetric.coil.:.current.data": {
  "PYTHON": "coils_non_axisymmetric_current_data(ods, {pulse})"
 },
 "coils_non_axisymmetric.coil.:.current.time": {
  "PYTHON": "coils_non_axisymmetric_current_data(ods, {pulse})"
 },
 "coils_non_axisymmetric.coil.:.identifier": {
  "PYTHON": "coils_non_axisymmetric_hardware(ods, {pulse})"
 },
 "coils_non_axisymmetric.coil.:.name": {
  "PYTHON": "coils_non_axisymmetric_hardware(ods, {pulse})"
 },
 "core_profiles": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r})"
 },
 "core_profiles.global_quantities.v_loop": {
  "COCOSIO": 11,
  "PYTHON": "core_profiles_global_quantities_data(ods, {pulse})"
 },
 "core_profiles.ids_properties.homogeneous_time": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.e_field.radial": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.e_field.radial_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.density": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.density_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.density_fit.measured": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.density_fit.measured_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.density_fit.psi_norm": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.density_thermal": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.density_thermal_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r})"
 },
 "core_profiles.profiles_1d.:.electrons.temperature": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.temperature_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.temperature_fit.measured": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.temperature_fit.measured_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.electrons.temperature_fit.psi_norm": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.grid.rho_pol_norm": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.grid.rho_tor_norm": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.density_fit.measured": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.density_fit.measured_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.density_fit.psi_norm": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.density_thermal": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.density_thermal_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.density_thermal_fit.measured": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.density_thermal_fit.measured_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.element.:": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.element.:.a": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.element.:.z_n": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.label": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.temperature": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.temperature_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.temperature_fit.measured": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.temperature_fit.measured_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.temperature_fit.psi_norm": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.velocity.toroidal": {
  "COCOSIO": 11,
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.velocity.toroidal_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.velocity.toroidal_fit.measured": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.velocity.toroidal_fit.measured_error_upper": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.ion.:.velocity.toroidal_fit.psi_norm": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.j_total": {
  "COCOSIO": 11,
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.pressure_perpendicular": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.profiles_1d.:.time": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "core_profiles.time": {
  "PYTHON": "core_profiles_profile_1d(ods, {pulse}, {PROFILES_tree!r}, {PROFILES_run_id!r})"
 },
 "ec_launchers.beam.:": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.frequency": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.frequency.data": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.frequency.time": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.identifier": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.launching_position.phi": {
  "COCOSIO": 11,
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.launching_position.r": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.launching_position.z": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.mode": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.name": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.phase.angle": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.phase.curvature": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.power_launched.data": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.power_launched.time": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.spot.angle": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.spot.size": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.steering_angle_pol": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.steering_angle_tor": {
  "COCOSIO": 11,
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.beam.:.time": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ec_launchers.code.parameters.toray.bhalf": {
  "PYTHON": "ec_launcher_active_hardware(ods, {pulse})"
 },
 "ece": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.channel.:": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.channel.:.frequency.data": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.channel.:.identifier": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.channel.:.if_bandwidth": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.channel.:.name": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.channel.:.t_e.data": {
  "PYTHON": "electron_cyclotron_emission_data(ods, {pulse}, {fast_ece!r})"
 },
 "ece.channel.:.t_e.data_error_upper": {
  "PYTHON": "electron_cyclotron_emission_data(ods, {pulse}, {fast_ece!r})"
 },
 "ece.channel.:.time": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.ids_properties.homogeneous_time": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.line_of_sight.first_point.phi": {
  "COCOSIO": 11,
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.line_of_sight.first_point.r": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.line_of_sight.first_point.z": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.line_of_sight.second_point.phi": {
  "COCOSIO": 11,
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.line_of_sight.second_point.r": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "ece.line_of_sight.second_point.z": {
  "PYTHON": "electron_cyclotron_emission_hardware(ods, {pulse}, {fast_ece!r})"
 },
 "equilibrium.code": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.code.parameters": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.code.parameters.time_slice.:": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.code.parameters.time_slice.:.auxquantities.degrees_of_freedom": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.auxquantities.num_fit_variables": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.auxquantities.num_hard_constraints": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.auxquantities.num_input_data": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.auxquantities.sigxxj": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.alphafp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.bitec": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.bitfc": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.bitip": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.bitmpi": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.brsp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.btor": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.calpa": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.cgama": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.coils": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.currn1": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.denr": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.denv": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.dflux": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.dmass": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.dnbeam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.dpsiecn": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ecurrt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.efitversion": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.elomin": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.errmag": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.errmagb": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.errmin": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.error": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.expmp2": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fcurbd": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ff2bdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ffbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ffknt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fftens": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fitfcsum": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fitsiref": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fitzts": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtbp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtcur": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtdlc": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtec": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtfc": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtfcsum": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtmp2": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtpre": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtqa": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.fwtsi": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.iavem": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.iaveus": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ibtcomp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.iconvr": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.icprof": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.icutfp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.iecurr": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ierchk": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ifcurr": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ifindopt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ifitvs": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.imagsigma": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.input_dir": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.iout": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.iplcout": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.iplim": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ishot": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.isolve": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.itek": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.itime": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.itimeu": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.itrace": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ixray": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kbound": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kcalpa": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kcgama": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kedgef": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kedgep": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.keehord": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.keqdsk": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kersil": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kff2bdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kffbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kffcur": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kfffnc": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kffhord": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kffknt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kframe": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kpp2bdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kppbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kppcur": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kppfnc": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kpphord": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kppknt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kprfit": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kskipvs": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ktear": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kwripre": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kww2bdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kwwbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kwwfnc": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kwwknt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.kzeroj": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.limitr": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.mxiter": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.n1coil": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.nbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.nbdrymx": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.nbeam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ndokin": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.nextra": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.nmass": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.npress": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.pbeam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.pcurbd": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.plasma": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.pnbeam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.pp2bdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ppbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ppknt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.pptens": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.pressr": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.psibit": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.psiecn": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.qvfit": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.rbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.rcentr": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.relax": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.req_valid": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.rpress": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.rzeroj": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.saicon": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.saimin": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.scrape": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.serror": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.sibeam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.sigdlc": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.sigpre": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.siloplim": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.siref": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.store_dir": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.table_dir": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.tolbndpsi": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.use_previous": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.vbit": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.vloop": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.vsdamp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.ww2bdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.wwbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.wwknt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.wwtens": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.xalpa": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.xgama": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.xltype": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.xltype_180": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.zbdry": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.in1.zelip": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.aa1gam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.aa2gam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.aa3gam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.aa4gam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.aa5gam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.aa6gam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.aa7gam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.dtmsefull": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.fwtgam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.kwaitmse": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.mse_certree": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.mse_quiet": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.mse_spave_on": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.mse_strict": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.mse_use_cer210": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.mse_use_cer330": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.mse_usecer": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.msebkp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.msefitfun": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.ok_210lt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.ok_30rt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.rrrgam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.sgamma": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.t_max_beam_off": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.tgamma": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.tgammauncor": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.v210lt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.v210rt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.v30lt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.v30rt": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.ins.zzzgam": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.currc139": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.currc199": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.currc79": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.curril150": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.curril30": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.curril90": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.curriu150": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.curriu30": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.curriu90": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.errdelz": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.fitdelz": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.fwtxxj": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.ifitdelz": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.nccoil": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.nicoil": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.oldccomp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.oldcomp": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.psiwant": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.relaxdz": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.rexpan": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.scaledz": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.sizeroj": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.vzeroj": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.code.parameters.time_slice.:.inwant.znose": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.ids_properties.comment": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.ids_properties.homogeneous_time": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.boundary.outline.r": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.boundary.outline.z": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.boundary.x_point.:": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.time_slice.:.boundary.x_point.:.r": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.boundary.x_point.:.z": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.bpol_probe.:": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.time_slice.:.constraints.bpol_probe.:.chi_squared": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.bpol_probe.:.exact": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.bpol_probe.:.measured": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.bpol_probe.:.reconstructed": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.bpol_probe.:.weight": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.chi_squared_total": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.diamagnetic_flux.exact": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.diamagnetic_flux.measured": {
  "COCOSIO": 11,
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.diamagnetic_flux.measured_error_upper": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.flux_loop.:": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.time_slice.:.constraints.flux_loop.:.chi_squared": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.flux_loop.:.exact": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.flux_loop.:.measured": {
  "COCOSIO": 11,
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.flux_loop.:.reconstructed": {
  "COCOSIO": 11,
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.flux_loop.:.weight": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.ip.exact": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.ip.measured": {
  "COCOSIO": 11,
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.ip.reconstructed": {
  "COCOSIO": 11,
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.mse_polarisation_angle.:": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.time_slice.:.constraints.mse_polarisation_angle.:.chi_squared": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.mse_polarisation_angle.:.exact": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.mse_polarisation_angle.:.measured": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.mse_polarisation_angle.:.measured_error_upper": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.mse_polarisation_angle.:.reconstructed": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.mse_polarisation_angle.:.weight": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pf_current.:": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.time_slice.:.constraints.pf_current.:.exact": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pf_current.:.measured": {
  "COCOSIO": 11,
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pf_current.:.reconstructed": {
  "COCOSIO": 11,
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pf_current.:.weight": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pressure.:": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r})"
 },
 "equilibrium.time_slice.:.constraints.pressure.:.chi_squared": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pressure.:.exact": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pressure.:.measured": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pressure.:.measured_error_upper": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.constraints.pressure.:.reconstructed": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.convergence.grad_shafranov_deviation_expression.description": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.convergence.grad_shafranov_deviation_expression.index": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.convergence.grad_shafranov_deviation_expression.name": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.convergence.grad_shafranov_deviation_value": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "equilibrium.time_slice.:.convergence.iterations_n": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "gas_injection.pipe.:": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.pipe.:.exit_position.phi": {
  "COCOSIO": 11,
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.pipe.:.exit_position.r": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.pipe.:.exit_position.z": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.pipe.:.name": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.pipe.:.second_point.phi": {
  "COCOSIO": 11,
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.pipe.:.second_point.r": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.pipe.:.second_point.z": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.pipe.:.valve_indices": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.valve.:": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.valve.:.identifier": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "gas_injection.valve.:.pipe_indices": {
  "PYTHON": "gas_injection_hardware(ods, {pulse})"
 },
 "interferometer.channel.:": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.identifier": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.first_point.phi": {
  "COCOSIO": 11,
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.first_point.r": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.first_point.z": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.second_point.phi": {
  "COCOSIO": 11,
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.second_point.r": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.second_point.z": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.third_point.phi": {
  "COCOSIO": 11,
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.third_point.r": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.line_of_sight.third_point.z": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "interferometer.channel.:.n_e_line.data": {
  "PYTHON": "interferometer_data(ods, {pulse})"
 },
 "interferometer.channel.:.n_e_line.time": {
  "PYTHON": "interferometer_data(ods, {pulse})"
 },
 "interferometer.channel.:.n_e_line.validity_timed": {
  "PYTHON": "interferometer_data(ods, {pulse})"
 },
 "interferometer.channel.:.name": {
  "PYTHON": "interferometer_hardware(ods, {pulse})"
 },
 "langmuir_probes.embedded.:": {
  "PYTHON": "langmuir_probes_hardware(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.b_field_angle.data": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.heat_flux_parallel.data": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.identifier": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.ion_saturation_current.data": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.n_e.data": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.name": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.position.phi": {
  "COCOSIO": 11,
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.position.r": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.position.z": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.surface_area_effective.data": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.t_e.data": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.time": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "langmuir_probes.embedded.:.v_floating.data": {
  "PYTHON": "langmuir_probes_data(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.field.data": {
  "COCOSIO": 11,
  "PYTHON": "magnetics_probes_data(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.field.data_error_upper": {
  "PYTHON": "magnetics_probes_data(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.field.time": {
  "PYTHON": "magnetics_probes_data(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.field.validity": {
  "PYTHON": "magnetics_probes_data(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.identifier": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.length": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.name": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.poloidal_angle": {
  "COCOSIO": 11,
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.position.r": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.position.z": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.toroidal_angle": {
  "COCOSIO": 11,
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.turns": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.b_field_pol_probe.:.type.index": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.diamagnetic_flux.:": {
  "VALUE": 1
 },
 "magnetics.diamagnetic_flux.:.data": {
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "magnetics.diamagnetic_flux.:.data_error_upper": {
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "magnetics.diamagnetic_flux.:.time": {
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "magnetics.flux_loop.:": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.flux_loop.:.flux.data": {
  "COCOSIO": 11,
  "PYTHON": "magnetics_floops_data(ods, {pulse}, {nref!r})"
 },
 "magnetics.flux_loop.:.flux.data_error_upper": {
  "PYTHON": "magnetics_floops_data(ods, {pulse}, {nref!r})"
 },
 "magnetics.flux_loop.:.flux.time": {
  "PYTHON": "magnetics_floops_data(ods, {pulse}, {nref!r})"
 },
 "magnetics.flux_loop.:.flux.validity": {
  "PYTHON": "magnetics_floops_data(ods, {pulse}, {nref!r})"
 },
 "magnetics.flux_loop.:.identifier": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.flux_loop.:.name": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.flux_loop.:.position.:": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.flux_loop.:.position.:.r": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.flux_loop.:.position.:.z": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.flux_loop.:.type.index": {
  "PYTHON": "magnetics_hardware(ods, {pulse})"
 },
 "magnetics.ip.:": {
  "VALUE": 1
 },
 "magnetics.ip.:.data": {
  "COCOSIO": 11,
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "magnetics.ip.:.data_error_upper": {
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "magnetics.ip.:.time": {
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "nbi.unit.:": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "nbi.unit.:.beamlets_group.:": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "nbi.unit.:.beamlets_group.:.angle": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "nbi.unit.:.energy.data": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "nbi.unit.:.energy.time": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "nbi.unit.:.name": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "nbi.unit.:.power_launched.data": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "nbi.unit.:.power_launched.time": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "nbi.unit.:.species.a": {
  "PYTHON": "nbi_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.current.data": {
  "COCOSIO": 11,
  "PYTHON": "pf_active_coil_current_data(ods, {pulse})"
 },
 "pf_active.coil.:.current.data_error_upper": {
  "PYTHON": "pf_active_coil_current_data(ods, {pulse})"
 },
 "pf_active.coil.:.current.time": {
  "PYTHON": "pf_active_coil_current_data(ods, {pulse})"
 },
 "pf_active.coil.:.element.:": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.geometry.geometry_type": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.geometry.outline.r": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.geometry.outline.z": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.geometry.rectangle.height": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.geometry.rectangle.r": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.geometry.rectangle.width": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.geometry.rectangle.z": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.identifier": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.name": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.element.:.turns_with_sign": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.identifier": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "pf_active.coil.:.name": {
  "PYTHON": "pf_active_hardware(ods, {pulse})"
 },
 "tf.b_field_tor_vacuum_r.data": {
  "COCOSIO": 11,
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "tf.b_field_tor_vacuum_r.data_error_upper": {
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "tf.b_field_tor_vacuum_r.time": {
  "PYTHON": "ip_bt_dflux_data(ods, {pulse})"
 },
 "tf.r0": {
  "VALUE": 1.6955
 },
 "thomson_scattering.channel.:": {
  "PYTHON": "thomson_scattering_data(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.identifier": {
  "PYTHON": "thomson_scattering_hardware(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.n_e.data": {
  "PYTHON": "thomson_scattering_data(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.n_e.data_error_upper": {
  "PYTHON": "thomson_scattering_data(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.n_e.time": {
  "PYTHON": "thomson_scattering_data(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.name": {
  "PYTHON": "thomson_scattering_hardware(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.position.phi": {
  "COCOSIO": 11,
  "PYTHON": "thomson_scattering_hardware(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.position.r": {
  "PYTHON": "thomson_scattering_hardware(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.position.z": {
  "PYTHON": "thomson_scattering_hardware(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.t_e.data": {
  "PYTHON": "thomson_scattering_data(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.t_e.data_error_upper": {
  "PYTHON": "thomson_scattering_data(ods, {pulse}, {revision!r})"
 },
 "thomson_scattering.channel.:.t_e.time": {
  "PYTHON": "thomson_scattering_data(ods, {pulse}, {revision!r})"
 },
 "wall.description_2d.:": {
  "VALUE": 1
 },
 "wall.description_2d.:.limiter.type.description": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "wall.description_2d.:.limiter.type.index": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "wall.description_2d.:.limiter.type.name": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "wall.description_2d.:.limiter.unit.:": {
  "VALUE": 1
 },
 "wall.description_2d.:.limiter.unit.:.outline.r": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "wall.description_2d.:.limiter.unit.:.outline.z": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 },
 "wall.ids_properties.homogeneous_time": {
  "VALUE": 1
 },
 "wall.time": {
  "PYTHON": "equilibrium_special(ods, {pulse}, {EFIT_tree!r}, {get_all!r})"
 }
}