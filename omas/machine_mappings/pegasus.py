import numpy as np
from inspect import unwrap
from omas import *
from omas.omas_utils import printd
from omas.machine_mappings._common import *
import mdsthin
from os import path

__all__ = []
__regression_arguments__ = {'__all__': __all__}


# Use the @machine_mapping_function to automatically fill out the .json mapping file
# All these functions must accept `ods` as their first argument
# Other arguments should have a default value defined via the machine_mapping_function decorator, as this serves two purposes:
#  1. run the test_machine_mapping_functions
#  2. let automatically fill the __options__ entry in the .json mapping file


@machine_mapping_function(__regression_arguments__, pulse=4898)
def pegasus_equil_data(ods, pulse, user_argument='loading data from Pegasus Data Archive'):
    """
    Loads all of the pegasus magnetics and coil current data into the ods.
    
    1-30-2025 ACS:
        Updating to use MDS+ analyzed & curated data tree. Start with test shot
        4898 with automagnetics and wall currents.

    Parameters
    ----------
    ods : ODS instance
        ODS instance.
    pulse : integer
        shot number.

    Returns
    -------
    None.

    """
    ods['dataset_description.ids_properties.comment'] = f'Comment for {pulse}: {user_argument}'

    c = mdsthin.Connection('atum.ep.wisc.edu')
    c.openTree('p3magtest', pulse)
    

    mag_names = magnetics_hardware(ret=True)
    fl_names = mag_names['fl']
    bdot_names = mag_names['bdot']
    
    ods['magnetics.ip.0.data'] = c.get('\\TOP.AUTOMAG:PLASMAROGA').data()
    ods['magnetics.ip.0.time'] = c.get('dim_of(\\TOP.AUTOMAG:PLASMAROGA)').data()
    ods['magnetics.ip.1.data'] = c.get('\\TOP.AUTOMAG:PLASMAROGB').data()
    ods['magnetics.ip.1.time'] = c.get('dim_of(\\TOP.AUTOMAG:PLASMAROGB)').data()

    for count, fl_name in enumerate(fl_names):
        ods[f'magnetics.flux_loop.{count}.name'] = fl_name
        ods[f'magnetics.flux_loop.{count}.flux.data'] = c.get('\\TOP.AUTOMAG:'+fl_name).data()
        ods[f'magnetics.flux_loop.{count}.flux.time'] = c.get('dim_of(\\TOP.AUTOMAG:'+fl_name+')').data()
        
    for count in range(len(bdot_names)):
        mp_name = bdot_names[count][3]
        ods[f'magnetics.b_field_pol_probe.{count}.name'] = mp_name
        ods[f'magnetics.b_field_pol_probe.{count}.field.data'] = c.get('\\TOP.AUTOMAG:'+mp_name).data()
        ods[f'magnetics.b_field_pol_probe.{count}.field.time'] = c.get('dim_of(\\TOP.AUTOMAG:'+mp_name+')').data()
        
    #print(Current_data.keys())
    # get pf_active hardware description --without-- placing the data in this ods
    # use `unwrap` to avoid calling `@machine_mapping_function` of `pf_active_hardware`
    ods1 = ODS()
    unwrap(pegasus_pf_hardware)(ods1, pulse)
    
    with omas_environment(ods, cocosio=1):
        fetch_assign(
            ods,
            ods1,
            pulse,
            channels='pf_active.coil',
            identifier='pf_active.coil.{channel}.element.0.identifier',
            time='pf_active.coil.{channel}.current.time',
            data='pf_active.coil.{channel}.current.data',
            validity=None,
            mds_server='atum.ep.wisc.edu',
            mds_tree='p3magtest',
            tdi_expression='ptdata2("{signal}",{pulse})',
            time_norm=0.001,
            data_norm=1.0,
        )
        
    for k in ods1['pf_active.coil']:
        identifier = ods1[f'pf_active.coil.{k}.identifier'].upper()
        ods[f'pf_active.coil.{k}.current.data'] = c.get('\\TOP.AUTOMAG:'+identifier).data()
        ods[f'pf_active.coil.{k}.current.time'] = c.get('dim_of(\\TOP.AUTOMAG:'+identifier+')').data()
    
        
    c.closeTree('p3magtest', pulse)
    c.disconnect()
    




@machine_mapping_function(__regression_arguments__, pulse=4898)
def pegasus_pf_hardware(ods, pulse, user_argument='initial Pegasus III model'):
    """
    Loads Pegasus PF coil hardware geometry.

    Parameters
    ----------
    ods : TYPE
        DESCRIPTION.
    pulse : TYPE
        DESCRIPTION.
    user_argument : TYPE, optional
        DESCRIPTION. The default is 'initial Pegasus III model'.

    Returns
    -------
    None.

    """
    #   R   Z   dR  dZ  tilt1   tilt2
    
    fc_dat = np.array(
        [[0.1038085, 0.89506501, 0.0161, 0.021468, 0.0, 0.0], #DIV1A - 10 elements
         [0.1222415, 0.89506501, 0.0161, 0.021468, 0.0, 0.0],
         [0.1038085, 0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1222415, 0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1038085, 0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1222415, 0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1038085, 0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1222415, 0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1038085, 0.98093694, 0.0161, 0.021468, 0.0, 0.0],
         [0.1222415, 0.98093694, 0.0161, 0.021468, 0.0, 0.0],       
         [0.1404925, 0.89506501, 0.0161, 0.021468, 0.0, 0.0], #DIV1B - 20 elements
         [0.1589255, 0.89506501, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, 0.89506501, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, 0.89506501, 0.0161, 0.021468, 0.0, 0.0],
         [0.1404925, 0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1589255, 0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, 0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, 0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1404925, 0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1589255, 0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, 0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, 0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1404925, 0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1589255, 0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, 0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, 0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1404925, 0.98093694, 0.0161, 0.021468, 0.0, 0.0],
         [0.1589255, 0.98093694, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, 0.98093694, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, 0.98093694, 0.0161, 0.021468, 0.0, 0.0],       
         [0.2625585, 1.027808, 0.0161, 0.021468, 0.0, 0.0], #DIV2A - 6 elements
         [0.2801915, 1.027808, 0.0161, 0.021468, 0.0, 0.0],
         [0.2625585, 1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.2801915, 1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.2625585, 1.070744, 0.0161, 0.021468, 0.0, 0.0],
         [0.2801915, 1.070744, 0.0161, 0.021468, 0.0, 0.0],       
         [0.2978245, 1.027808, 0.0161, 0.021468, 0.0, 0.0], #DIV2B - 12 elements
         [0.3154575, 1.027808, 0.0161, 0.021468, 0.0, 0.0],
         [0.3330905, 1.027808, 0.0161, 0.021468, 0.0, 0.0],
         [0.3507235, 1.027808, 0.0161, 0.021468, 0.0, 0.0],
         [0.2978245, 1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.3154575, 1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.3330905, 1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.3507235, 1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.2978245, 1.070744, 0.0161, 0.021468, 0.0, 0.0],
         [0.3154575, 1.070744, 0.0161, 0.021468, 0.0, 0.0],
         [0.3330905, 1.070744, 0.0161, 0.021468, 0.0, 0.0],
         [0.3507235, 1.070744, 0.0161, 0.021468, 0.0, 0.0],        
         [0.2625585, -1.027808, 0.0161, 0.021468, 0.0, 0.0], #DIV3A - 6 elements
         [0.2794595, -1.027808, 0.0161, 0.021468, 0.0, 0.0],
         [0.2625585, -1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.2794595, -1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.2625585, -1.070744, 0.0161, 0.021468, 0.0, 0.0],
         [0.2794595, -1.070744, 0.0161, 0.021468, 0.0, 0.0],      
         [0.2999825, -1.027808, 0.0161, 0.021468, 0.0, 0.0], #DIV3B - 12 elements
         [0.3168835, -1.027808, 0.0161, 0.021468, 0.0, 0.0],
         [0.3337845, -1.027808, 0.0161, 0.021468, 0.0, 0.0],
         [0.3506855, -1.027808, 0.0161, 0.021468, 0.0, 0.0],
         [0.2999825, -1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.3168835, -1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.3337845, -1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.3506855, -1.049276, 0.0161, 0.021468, 0.0, 0.0],
         [0.2999825, -1.070744, 0.0161, 0.021468, 0.0, 0.0],
         [0.3168835, -1.070744, 0.0161, 0.021468, 0.0, 0.0],
         [0.3337845, -1.070744, 0.0161, 0.021468, 0.0, 0.0],
         [0.3506855, -1.070744, 0.0161, 0.021468, 0.0, 0.0],        
         [0.1038085, -0.89506501, 0.0161, 0.021468, 0.0, 0.0], #DIV4A - 10 elements
         [0.1222415, -0.89506501, 0.0161, 0.021468, 0.0, 0.0],
         [0.1038085, -0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1222415, -0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1038085, -0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1222415, -0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1038085, -0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1222415, -0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1038085, -0.98093694, 0.0161, 0.021468, 0.0, 0.0],
         [0.1222415, -0.98093694, 0.0161, 0.021468, 0.0, 0.0],       
         [0.1404925, -0.89506501, 0.0161, 0.021468, 0.0, 0.0], #DIV4B - 20 elements
         [0.1589255, -0.89506501, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, -0.89506501, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, -0.89506501, 0.0161, 0.021468, 0.0, 0.0],
         [0.1404925, -0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1589255, -0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, -0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, -0.91653299, 0.0161, 0.021468, 0.0, 0.0],
         [0.1404925, -0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1589255, -0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, -0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, -0.93800098, 0.0161, 0.021468, 0.0, 0.0],
         [0.1404925, -0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1589255, -0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, -0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, -0.95946896, 0.0161, 0.021468, 0.0, 0.0],
         [0.1404925, -0.98093694, 0.0161, 0.021468, 0.0, 0.0],
         [0.1589255, -0.98093694, 0.0161, 0.021468, 0.0, 0.0],
         [0.1773585, -0.98093694, 0.0161, 0.021468, 0.0, 0.0],
         [0.1957915, -0.98093694, 0.0161, 0.021468, 0.0, 0.0],       
         [0.4406265, 1.067, 0.004953, 0.08255, 0.0, 0.0], #EF1A - 5 elements
         [0.4458589, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.4510913, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.4563237, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.4615561, 1.067, 0.004953, 0.08255, 0.0, 0.0],        
         [0.4731385, 1.067, 0.004953, 0.08255, 0.0, 0.0], #EF1B - 9 elements
         [0.4783709, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.4836033, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.4888357, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.4940681, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.4993005, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.5045329, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.5097654, 1.067, 0.004953, 0.08255, 0.0, 0.0],
         [0.5149978, 1.067, 0.004953, 0.08255, 0.0, 0.0],        
         [0.90007, 1.0807, 0.01905, 0.01905, 0.0, 0.0], #EF2 - 3 elements
         [0.90007, 1.0599999, 0.01905, 0.01905, 0.0, 0.0],
         [0.90007, 1.03943, 0.01905, 0.01905, 0.0, 0.0],       
         [1.14823, 0.77582997, 0.01905, 0.01905, 0.0, 0.0], #EF3 - 5 elements
         [1.14823, 0.75481999, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, 0.73382002, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, 0.71280998, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, 0.69181001, 0.01905, 0.01905, 0.0, 0.0],   
         [1.14823, 0.35124001, 0.01905, 0.01905, 0.0, 0.0], #EF4 - 5 elements
         [1.14823, 0.33059999, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, 0.30996001, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, 0.28992999, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, 0.26868999, 0.01905, 0.01905, 0.0, 0.0],      
         [1.14823, -0.35123, 0.01905, 0.01905, 0.0, 0.0], #EF5 - 5 elements
         [1.14823, -0.33059001, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, -0.30996001, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, -0.28992, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, -0.26868001, 0.01905, 0.01905, 0.0, 0.0],       
         [1.14823, -0.77582997, 0.01905, 0.01905, 0.0, 0.0], #EF6 - 5 elements
         [1.14823, -0.75481999, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, -0.73382002, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, -0.71280998, 0.01905, 0.01905, 0.0, 0.0],
         [1.14823, -0.69181001, 0.01905, 0.01905, 0.0, 0.0],        
         [0.90007, -1.0807, 0.01905, 0.01905, 0.0, 0.0], #EF7 - 3 elements
         [0.90007, -1.0599999, 0.01905, 0.01905, 0.0, 0.0],
         [0.90007, -1.03943, 0.01905, 0.01905, 0.0, 0.0],        
         [1.14823, 0.81260997, 0.01445, 0.01445, 0.0, 0.0], #RADIAL - NEED TO MAKE SURE TWO HAVE NEGATIVE elements IN TURN FC
         [1.14823, 0.65503001, 0.01445, 0.01445, 0.0, 0.0],
         [1.14823, -0.81260997, 0.01445, 0.01445, 0.0, 0.0],
         [1.14823, -0.65503001, 0.01445, 0.01445, 0.0, 0.0],        
         [0.102918, 1.14568, 0.0127, 0.084597, 0.0, 0.0], #TORQUE PLATE 1 - 8 elements
         [0.187514, 1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.272111, 1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.356707, 1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.441304, 1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.525900, 1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.610497, 1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.695093, 1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.102918, 1.46, 0.01905, 0.084597, 0.0, 0.0], #TORQUE PLATE 2 - 8 elements
         [0.187514, 1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.272111, 1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.356707, 1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.441304, 1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.525900, 1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.610497, 1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.695093, 1.46, 0.01905, 0.084597, 0.0, 0.0],       
         [0.102918, -1.14568, 0.0127, 0.084597, 0.0, 0.0], #TORQUE PLATE 3 - 8 elements
         [0.187514, -1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.272111, -1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.356707, -1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.441304, -1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.525900, -1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.610497, -1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.695093, -1.14568, 0.0127, 0.084597, 0.0, 0.0],
         [0.102918, -1.46, 0.01905, 0.084597, 0.0, 0.0], #TORQUE PLATE 4 - 8 elements
         [0.187514, -1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.272111, -1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.356707, -1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.441304, -1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.525900, -1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.610497, -1.46, 0.01905, 0.084597, 0.0, 0.0],
         [0.695093, -1.46, 0.01905, 0.084597, 0.0, 0.0],       
         [1.0423, 0.2776, 0.0786, 0.006, 0.0, 0.0], #WALL COIL PACK 1 - OUTER WALL UPPER - 9 elements
         [1.00318, 0.05191, 0.00625, 0.10382, 0.0, 0.0],
         [1.00318, 0.15573, 0.00625, 0.10382, 0.0, 0.0],
         [1.00318, 0.25955, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, 0.31146, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, 0.36337, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, 0.41528, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, 0.46719, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, 0.50918001, 0.00625, 0.05191, 0.0, 94.0],        
         [0.99604702, 0.55118299, 0.00625, 0.067775004, 0.0, 99.0], #WALL COIL PACK 2 - MID UPPER DOME - 7 elements
         [0.96476698, 0.62824702, 0.00625, 0.1, 0.0, 119.0],
         [0.90642601, 0.70854598, 0.00625, 0.1, 0.0, 133.0],
         [0.83239502, 0.775204, 0.00625, 0.1, 0.0, 143.0],
         [0.748945, 0.829916, 0.00625, 0.1, -29.0, 0.0],
         [0.65957499, 0.87447399, 0.00625, 0.1, -23.0, 0.0],
         [0.56644601, 0.91069001, 0.00625, 0.1, -19.0, 0.0],        
         [0.470874, 0.93990898, 0.00625, 0.1, -15.0, 0.0], #WALL COIL PACK 3 - UPPER UPPER DOME - 10 elements
         [0.37367, 0.96324599, 0.00625, 0.1, -12.0, 0.0],
         [0.27525, 0.9806, 0.00625, 0.1, 0.0, -8.0],
         [0.22925, 0.958709, 0.0042, 0.0577, 0.0, 0.0],
         [0.22925, 0.912121, 0.0042, 0.0577, 0.0, 0.0],
         [0.22925, 0.86553401, 0.0042, 0.0577, 0.0, 0.0],
         [0.081428, 0.836, 0.042235, 0.0159, 0.0, 0.0],
         [0.123663, 0.836, 0.042235, 0.0159, 0.0, 0.0],
         [0.165898, 0.836, 0.042235, 0.0159, 0.0, 0.0],
         [0.208133, 0.836, 0.042235, 0.0159, 0.0, 0.0],         
         [1.0423, -0.2776, 0.0786, 0.006, 0.0, 0.0], #WALL COIL PACK 4 - OUTER WALL LOWER - 9 elements
         [1.00318, -0.05191, 0.00625, 0.10382, 0.0, 0.0],
         [1.00318, -0.15573, 0.00625, 0.10382, 0.0, 0.0],
         [1.00318, -0.25955, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, -0.31146, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, -0.36337, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, -0.41528, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, -0.46719, 0.00625, 0.05191, 0.0, 0.0],
         [1.00318, -0.50918, 0.00625, 0.05191, 0.0, 86.0],    
         [0.99604702, -0.551183, 0.00625, 0.067775004, 0.0, 81.0], #WALL COIL PACK 5 - MID LOWER DOME - 7 elements
         [0.96476698, -0.628247, 0.00625, 0.1, 0.0, 61.0],
         [0.90642601, -0.708546, 0.00625, 0.1, 0.0, 47.0],
         [0.83239502, -0.775204, 0.1, 0.00625, 37.0, 0.0],
         [0.748945, -0.829916, 0.1, 0.00625, 29.0, 0.0],
         [0.659575, -0.874474, 0.1, 0.00625, 23.0, 0.0],
         [0.566446, -0.91069, 0.1, 0.00625, 19.0, 0.0],
         [0.470874, -0.93990898, 0.1, 0.00625, 15.0, 0.0], #WALL COIL PACK 6 - LOWER LOWER DOME - 10 elements
         [0.37367, -0.963246, 0.1, 0.00625, 12.0, 0.0],
         [0.27525, -0.9806, 0.1, 0.00625, 8.0, 0.0],
         [0.22925, -0.958709, 0.0042, 0.0577, 0.0, 0.0],
         [0.22925, -0.912121, 0.0042, 0.035475, 0.0, 0.0],
         [0.22925, -0.865534, 0.0042, 0.0577, 0.0, 0.0],
         [0.081428, -0.836, 0.042235, 0.0159, 0.0, 0.0],
         [0.123663, -0.836, 0.042235, 0.0159, 0.0, 0.0],
         [0.165898, -0.836, 0.042235, 0.0159, 0.0, 0.0],
         [0.208133, -0.836, 0.042235, 0.0159, 0.0, 0.0],      
         [0.0603, 0.8, 0.002, 0.1, 0.0, 0.0], #WALL COIL PACK 7 - CENTER COLUMN & BELLOWS - 34 elements
         [0.0603, 0.75, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.7, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.65, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.6, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.55, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.5, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.45, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.4, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.35, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.3, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.25, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.2, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.15, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.1, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.05, 0.002, 0.1, 0.0, 0.0],
         [0.0603, 0.0, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.05, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.1, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.15, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.2, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.25, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.3, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.35, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.4, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.45, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.5, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.55, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.6, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.65, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.7, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.75, 0.002, 0.1, 0.0, 0.0],
         [0.0603, -0.8, 0.002, 0.1, 0.0, 0.0],
         [0.075, -1.0, 0.005, 0.1, 0.0, 0.0]]
         )
    FCID = np.ones(len(fc_dat)) # FCID sets which elements of fc_dat are grouped together into a coil set
    # DIV1A is coil #1 with 10 elements, change other coil values appropriately
    FCID[10:30]*=2.0 # 20 elements in DIV1B
    FCID[30:36]*=3.0 # 6 elements in DIV2A
    FCID[36:48]*=4.0 # 12 elements in DIV2B
    FCID[48:54]*=5.0 # 6 elements in DIV3A
    FCID[54:66]*=6.0 # 12 elements in DIV3B
    FCID[66:76]*=7.0 # 10 elements in DIV4A
    FCID[76:96]*=8.0 # 20 elements in DIV4B
    FCID[96:101]*=9.0 # 5 elements in EF1A
    FCID[101:110]*=10.0 # 9 elements in EF1B
    FCID[110:113]*=11.0 # 3 elements in EF2
    FCID[113:118]*=12.0 # 5 elements in EF3
    FCID[118:123]*=13.0 # 5 elements in EF4
    FCID[123:128]*=14.0 # 5 elements in EF5
    FCID[128:133]*=15.0 # 5 elements in EF6
    FCID[133:136]*=16.0 # 3 elements in EF7
    FCID[136:140]*=17.0 # 4 elements in RADIAL
    FCID[140:148]*=18.0 # 8 elements in TORQUE1
    FCID[148:156]*=19.0 # 8 elements in TORQUE2
    FCID[156:164]*=20.0 # 8 elements in TORQUE3
    FCID[164:172]*=21.0 # 8 elements in TORQUE4
    FCID[172:181]*=22.0 # 9 elements in WALL1
    FCID[181:188]*=23.0 # 7 elements in WALL2
    FCID[188:198]*=24.0 # 10 elements in WALL3
    FCID[198:207]*=25.0 # 9 elements in WALL4
    FCID[207:214]*=26.0 # 7 elements in WALL5
    FCID[214:224]*=27.0 # 10 elements in WALL6
    FCID[224:258]*=28.0 # 34 elements in WALL7
    #print(FCID)
    
    turnFC = np.ones(len(fc_dat))
    # wall coils turns ratios from shot 2050, avg bet. 43-45 ms
    FCturnEF = np.ones(136)              #EF & DIV coils
    FCturn = np.append(FCturnEF,[1.0, 1.0, -1.0, -1.0,    #radial
              1.0, 1.3, 1.4, 0.79, 0.63, 0.66, 0.7, 0.74, 0.78, #wall 1
              1.0, 1.52, 1.51, 1.45, 1.34, 1.19, 1.02, #wall 2
              1.0, 0.76, 0.53, 0.16, 0.16, 0.17, 0.16, 0.24, 0.33, 0.42, #wall 3
              1.0, 1.45, 1.48, 0.79, 0.62, 0.64, 0.67, 0.7, 0.73, #wall 4
              1.0, 1.51, 1.49, 1.41, 1.29, 1.14, 0.96, #wall 5
              1.0, 0.76, 0.53, 0.16, 0.1, 0.17, 0.16, 0.24, 0.33, 0.42, #wall 6
              1.0, 1.01, 1.01, 1.0, 1.0, 0.97, 0.95, 0.93, 0.91, 0.89, # wall 7
              0.86, 0.84, 0.83, 0.81, 0.79, 0.78, 0.77, 0.77, 0.76, # wall 7 cont.
              0.76, 0.76, 0.76, 0.77, 0.77, 0.78, 0.79, 0.8, 0.8, # wall 7 cont.
              0.81, 0.81, 0.81, 0.8, 0.78, 2.23])

    coil_names = [
        'DIV1A',
        'DIV1B',
        'DIV2A',
        'DIV2B',
        'DIV3A',
        'DIV3B',
        'DIV4A',
        'DIV4B',
        'EF1A',
        'EF1B',
        'EF2',
        'EF3',
        'EF4',
        'EF5',
        'EF6',
        'EF7',
        'RADIAL',
        'TORQUE1',
        'TORQUE2',
        'TORQUE3',
        'TORQUE4',
        'WALL1',
        'WALL2',
        'WALL3',
        'WALL4',
        'WALL5',
        'WALL6',
        'WALL7'
    ]
    
    #for k, fc_name in enumerate(coil_names):
    #    ods['pf_active.coil'][k]['name'] = fc_name
    #    ods['pf_active.coil'][k]['identifier'] = fc_name
    #    ods['pf_active.coil'][k]['element.0.name'] = fc_name
    #    ods['pf_active.coil'][k]['element.0.identifier'] = fc_name
    
    for k in range(len(fc_dat)):
        if k < 10:
            cname = 'DIV1A_'+str(k+1)
        if 10 <= k < 30:
            cname = 'DIV1B_'+str(k-9)
        if 30 <= k < 36:
            cname = 'DIV2A_'+str(k-29)
        if 36 <= k < 48:
            cname = 'DIV2B_'+str(k-35)
        if 48 <= k < 54:
            cname = 'DIV3A_'+str(k-47)
        if 54 <= k < 66:
            cname = 'DIV3B_'+str(k-53)
        if 66 <= k < 76:
            cname = 'DIV4A_'+str(k-65)
        if 76 <= k < 96:
            cname = 'DIV4B_'+str(k-75)
        if 96 <= k < 101:
            cname = 'EF1A_'+str(k-95)
        if 101 <= k < 110:
            cname = 'EF1B_'+str(k-100)
        if 110 <= k < 113:
            cname = 'EF2_'+str(k-109)
        if 113 <= k < 118:
            cname = 'EF3_'+str(k-112)
        if 118 <= k < 123:
            cname = 'EF4_'+str(k-117)
        if 123 <= k < 128:
            cname = 'EF5_'+str(k-122)
        if 128 <= k < 133:
            cname = 'EF6_'+str(k-127)
        if 133 <= k < 136:
            cname = 'EF7_'+str(k-132)
        if 136 <= k < 140:
            cname = 'RADIAL_'+str(k-135)
        if 140 <= k < 148:
            cname = 'TORQUE1_'+str(k-139)
        if 148 <= k < 156:
            cname = 'TORQUE2_'+str(k-147)
        if 156 <= k < 164:
            cname = 'TORQUE3_'+str(k-155)
        if 164 <= k < 172:
            cname = 'TORQUE4_'+str(k-163)
        if 172 <= k < 181:
            cname = 'WALL1_'+str(k-171)
        if 181 <= k < 188:
            cname = 'WALL2_'+str(k-180)
        if 188 <= k < 198:
            cname = 'WALL3_'+str(k-187)
        if 198 <= k < 207:
            cname = 'WALL4_'+str(k-197)
        if 207 <= k < 214:
            cname = 'WALL5_'+str(k-206)
        if 214 <= k < 224:
            cname = 'WALL6_'+str(k-213)
        if 224 <= k < 258:
            cname = 'WALL7_'+str(k-223)
        
        ods['pf_active.coil'][k]['name'] = cname
        ods['pf_active.coil'][k]['identifier'] = cname
        ods['pf_active.coil'][k]['element.0.name'] = cname
        ods['pf_active.coil'][k]['element.0.identifier'] = cname
        
        FCID[10:30]*=2.0 # 20 elements in DIV1B
        FCID[30:36]*=3.0 # 6 elements in DIV2A
        FCID[36:48]*=4.0 # 12 elements in DIV2B
        FCID[48:54]*=5.0 # 6 elements in DIV3A
        FCID[54:66]*=6.0 # 12 elements in DIV3B
        FCID[66:76]*=7.0 # 10 elements in DIV4A
        FCID[76:96]*=8.0 # 20 elements in DIV4B
        FCID[96:101]*=9.0 # 5 elements in EF1A
        FCID[101:110]*=10.0 # 9 elements in EF1B
        FCID[110:113]*=11.0 # 3 elements in EF2
        FCID[113:118]*=12.0 # 5 elements in EF3
        FCID[118:123]*=13.0 # 5 elements in EF4
        FCID[123:128]*=14.0 # 5 elements in EF5
        FCID[128:133]*=15.0 # 5 elements in EF6
        FCID[133:136]*=16.0 # 3 elements in EF7
        FCID[136:140]*=17.0 # 4 elements in RADIAL
        FCID[140:148]*=18.0 # 8 elements in TORQUE1
        FCID[148:156]*=19.0 # 8 elements in TORQUE2
        FCID[156:164]*=20.0 # 8 elements in TORQUE3
        FCID[164:172]*=21.0 # 8 elements in TORQUE4
        FCID[172:181]*=22.0 # 9 elements in WALL1
        FCID[181:188]*=23.0 # 7 elements in WALL2
        FCID[188:198]*=24.0 # 10 elements in WALL3
        FCID[198:207]*=25.0 # 9 elements in WALL4
        FCID[207:214]*=26.0 # 7 elements in WALL5
        FCID[214:224]*=27.0 # 10 elements in WALL6
        FCID[224:258]*=28.0 # 34 elements in WALL7
    
    ods = pf_coils_to_ods(ods, fc_dat)
    
    limiter = np.array([[0.055, 0.66],
                       [0.074, 0.66],
                       [0.122, 0.746],
                       [0.122, 0.8],
                       [0.544, 0.8],
                       [0.547, 0.797],
                       [0.85, 0.494],
                       [0.85, -0.494],
                       [0.547, -0.797],
                       [0.544, -0.8],
                       [0.122, -0.8],
                       [0.122, -0.746],
                       [0.074, -0.66],
                       [0.055, -0.66]])

    
@machine_mapping_function(__regression_arguments__,)
def magnetics_hardware(ods, ret=False):
    
    # flux loops [RSI ZSI]
    silop = [[0.0606, 0.696],
             [0.0606, 0.6275],
             [0.0606, 0.557],
             [0.0606, 0.347],
             [0.0606, 0.1355],
             [0.0606, 0.064],
             [0.06058, -0.0025],
             [0.06058, -0.0773],
             [0.06058, -0.1425],
             [0.06058, -0.3508],
             [0.0606, -0.5615],
             [0.0606, -0.6305],
             [0.0606, -0.6995],
             [0.2444, 0.8438],
             [0.3415, 0.8435],
             [0.3953, 0.8436],
             [0.4589, 0.8438],
             [0.5229, 0.8431],
             [0.7262, 0.7074],
             [0.7714, 0.6574],
             [0.8191, 0.6074],
             [0.8671, 0.5564],
             [0.9167, 0.5064],
             [0.9168, -0.5116],
             [0.8681, -0.5626],
             [0.8198, -0.6116],
             [0.7715, -0.6646],
             [0.7233, -0.7136],
             [0.5228, -0.8492],
             [0.4598, -0.8485],
             [0.3955, -0.8479],
             [0.3417, -0.8473],
             [0.2432, -0.8473],
             [0.0955, 0.8571],
             [0.222, 0.8571],
             [0.222, 0.9215],
             [0.223, 0.9892],
             [0.3925, 0.9016],
             [0.737, 0.814],
             [0.973, 0.64],
             [1.01, 0.277],
             [1.01, -0.275],
             [0.974, -0.64],
             [0.737, -0.84],
             [0.3925, -0.9146],
             [0.224, -0.9892],
             [0.222, -0.9215],
             [0.222, -0.8571],
             [0.0794, -0.8571]
        ]
    silop_name = ['CFL1', 'CFL2', 'CFL3', 'CFL4', 'CFL5', 'CFL6', 'CFL7', 
                 'CFL8', 'CFL9', 'CLF10', 'CFL11', 'CFL12', 'CFL13', 'NCFL1',
                 'NCFL2', 'NCFL3', 'NCFL4', 'NCFL5', 'NCFL6', 'NCFL7',
                 'NCFL8', 'NCFL9', 'NCFL10', 'NCFL11', 'NCFL12', 'NCFL13',
                 'NCFL14', 'NCFL15', 'NCFL16', 'NCFL17', 'NCFL18', 'NCFL19',
                 'NCFL20', 'WFL1', 'WFL2', 'WFL3', 'WFL4', 'WFL5', 'WFL6',
                 'WFL7', 'WFL8', 'WFL9', 'WFL10', 'WFL11', 'WFL12', 'WFL13',
                 'WFL14', 'WFL15', 'WFL16']
    
    #B-dot probes [XMP2 YMP2 AMP2 MPNAM2]
    mprobes = [[0.06755, 0.6945, 0.0, 'CPA1'],
               [0.06755, 0.625, 0.0, 'CPA2'],
               [0.06755, 0.5555, 0.0, 'CPA3'],
               [0.06755, 0.486, 0.0, 'CPA4'],
               [0.06755, 0.4163, 0.0, 'CPA5'],
               [0.06755, 0.3466, 0.0, 'CPA6'],
               [0.06755, 0.277, 0.0, 'CPA7'],
               [0.06755, 0.2079, 0.0, 'CPA8'],
               [0.06755, 0.1365, 0.0, 'CPA9'],
               [0.06755, 0.067, 0.0, 'CPA10'],
               [0.06755, -0.0023, 0.0, 'CPA11'],
               [0.06755, -0.0725, 0.0, 'CPA12'],
               [0.06755, -0.1428, 0.0, 'CPA13'],
               [0.06755, -0.2125, 0.0, 'CPA14'],
               [0.06755, -0.2815, 0.0, 'CPA15'],
               [0.06755, -0.3515, 0.0, 'CPA16'],
               [0.06755, -0.4215, 0.0, 'CPA17'],
               [0.06755, -0.492, 0.0, 'CPA18'],
               [0.06755, -0.5613, 0.0, 'CPA19'],
               [0.06755, -0.6308, 0.0, 'CPA20'],
               [0.06755, -0.7, 0.0, 'CPA21'],
               [0.0682, -0.28, 0.0, 'CTOR1'],
               [0.067, -0.88, 0.0, 'CTOR2'],
               [0.0682, -1.04, 0.0, 'CTOR3'],
               [0.0677, -0.935, 0.0, 'CTOR4'],
               [0.0674, -0.96, 0.0, 'COTR5'],
               [0.067, -0.8, 0.0, 'CTOR6'],
               [0.9173, -0.1455, 0.0, 'OTOR1'],
               [0.9148, -0.1485, 0.0, 'OTOR2'],
               [0.9153, -0.1455, 0.0, 'OTOR3'],
               [0.9088, -0.153, 0.0, 'OTOR4'],
               [0.9173, -0.1485, 0.0, 'OTOR5'],
               [0.9153, -0.147, 0.0, 'OTOR6'],
               [0.205, 0.8034, 0.0, 'PDX1'],
               [0.3734, 0.8034, 0.0, 'PDX2'],
               [0.5471, 0.8034, 0.0, 'PDX3'],
               [0.8, 0.6, 0.0, 'PDX4'],
               [0.9, 0.35, 0.0, 'PDX5'],
               [0.9, 0.2, 0.0, 'PDX6'],
               [0.9, 0.0, 0.0, 'PDX7'],
               [0.9,-0.2, 0.0, 'PDX8'],
               [0.9, -0.35, 0.0, 'PDX9'],
               [0.8, -0.6, 0.0, 'PDX10'],
               [0.531, -0.803, 0.0, 'PDX11'],
               [0.357, -0.803, 0.0, 'PDX12'],
               [0.189, -0.803, 0.0, 'PDX13']
        ]
    
    if ret: return {'fl':silop_name, 'bdot':mprobes}


# =====================
if __name__ == '__main__':
    test_machine_mapping_functions(__all__, globals(), locals())
