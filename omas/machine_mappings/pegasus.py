import numpy as np
from inspect import unwrap
from omas import *
from omas.omas_utils import printd
from omas.machine_mappings._common import *
from omas.utilities.machine_mapping_decorator import machine_mapping_function
from omas.omas_core import ODS
import MDSplus #mdsthin
from os import path
from math import pi

__all__ = []
__regression_arguments__ = {'__all__': __all__}


# Use the @machine_mapping_function to automatically fill out the .json mapping file
# All these functions must accept `ods` as their first argument
# Other arguments should have a default value defined via the machine_mapping_function decorator, as this serves two purposes:
#  1. run the test_machine_mapping_functions
#  2. let automatically fill the __options__ entry in the .json mapping file


@machine_mapping_function(__regression_arguments__, pulse=4898)
def pegasus_equil_data(ods, pulse, user_argument='loading data from mds+', verbose = False):
    """
    Loads all of the pegasus magnetics and coil current data into the ods.
    
    1-30-2025 ACS:
        Updating to use MDS+ analyzed & curated data tree. Start with test shot
        4898 with automagnetics and wall currents.

    Parameters
    ----------
    ods : ODS instance
        ODS instance.
    pulse : integer
        shot number.

    Returns
    -------
    None.

    """
    ods['dataset_description.ids_properties.comment'] = f'Comment for {pulse}: {user_argument}'

    #c = mdsthin.Connection('atum.ep.wisc.edu')
    c = MDSplus.Connection('atum.ep.wisc.edu')
    c.openTree('p3magtest', pulse)
    
    # get pf_active hardware description --without-- placing the data in this ods
    # use `unwrap` to avoid calling `@machine_mapping_function` of `pf_active_hardware`
    ods1 = ODS()
    unwrap(magnetics_hardware)(ods1)
    
    # get list of diagnostic names in tree to avoid node not found errors while loading
    diags = c.tcl('dir \\P3MAGTEST::TOP.AUTOMAG.**********')
    dList = diags.split()
    dList = dList[1:-4]
    mdsDiags = [s[1:] for s in dList]
    with omas_environment(ods, dynamic_path_creation='dynamic_array_structures'):
        for k in ods1['magnetics.flux_loop']:
            identifier = ods1[f'magnetics.flux_loop.{k}.identifier'].upper()
            if identifier in mdsDiags:
                ods[f'magnetics.flux_loop.{k}.flux.data'] = c.get('\\TOP.AUTOMAG:'+identifier).data()
                ods[f'magnetics.flux_loop.{k}.flux.time'] = c.get('dim_of(\\TOP.AUTOMAG:'+identifier+')').data()
                if verbose: print(identifier+' loaded')
        
        for k in ods1['magnetics.b_field_pol_probe']:
            identifier = ods1[f'magnetics.b_field_pol_probe.{k}.identifier'].upper()
            if identifier in mdsDiags:
                ods[f'magnetics.b_field_pol_probe.{k}.field.data'] = c.get('\\TOP.AUTOMAG:'+identifier).data()
                ods[f'magnetics.b_field_pol_probe.{k}.field.time'] = c.get('dim_of(\\TOP.AUTOMAG:'+identifier+')').data()
                if verbose: print(identifier+' loaded')
        
        ods['magnetics.ip.0.data'] = c.get('\\TOP.AUTOMAG:PLASMAROGA').data()
        ods['magnetics.ip.0.time'] = c.get('dim_of(\\TOP.AUTOMAG:PLASMAROGA)').data()
        ods['magnetics.ip.1.data'] = c.get('\\TOP.AUTOMAG:PLASMAROGB').data()
        ods['magnetics.ip.1.time'] = c.get('dim_of(\\TOP.AUTOMAG:PLASMAROGB)').data()
        
        unwrap(pegasus_pf_hardware)(ods1, pulse)
        
        # wall currents are stored in a single array so need to treat those differently for now - ACS 3-21-2025
        # update: all currents are stored in the I_v_t array. The first six in the test
        #           tree are for EF coils, but need to determine which ones.
        # wall currents are presently set as follows:
            #Wall Coil     I_v_t index
            #  1                6
            #  2                15
            #  3                22
            #  4                32
            #  5                41
            #  6                48
            #  7                58
            #  T1               75
            #  T2               83
            #  T3               91
            #  T4               99
            
        wall_I_v_t = c.get('\\TOP.WC2:'+'I_v_t').data()
        wall_t = c.get('dim_of(\\TOP.WC2:'+'I_v_t)').data()
        
        for k in ods1['pf_active.coil']:
            identifier = ods1[f'pf_active.coil.{k}.identifier'].upper()
            try:
                ods[f'pf_active.coil.{k}.current.data'] = c.get('\\TOP.OMAS:'+identifier).data()
                ods[f'pf_active.coil.{k}.current.time'] = c.get('dim_of(\\TOP.OMAS:'+identifier+')').data()
                if verbose: print(identifier+" loaded")
            except:
                if verbose: print(identifier+" not loaded")
                
    c.closeTree('p3magtest', pulse)
    c.disconnect()


@machine_mapping_function(__regression_arguments__, pulse=4898)
def pegasus_pf_hardware(ods, pulse, user_argument='initial Pegasus III model'):
    """
    Loads Pegasus PF coil hardware geometry.
    
    Wall coil info:
        wall coils turns ratios from shot 2050, avg bet. 43-45 ms
        These values are set by the FCturn value in the fc_dat array - ACS 3-20-2025

    Parameters
    ----------
    ods : TYPE
        DESCRIPTION.
    pulse : TYPE
        DESCRIPTION.
    user_argument : TYPE, optional
        DESCRIPTION. The default is 'initial Pegasus III model'.

    Returns
    -------
    None.

    """
    #   R   Z   dR  dZ  tilt1   tilt2   FCID   FCturn   Name
    
    fc_dat = np.array(
        [[0.1038085, 0.89506501, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'], #DIV1A - 10 elements
         [0.1222415, 0.89506501, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],
         [0.1038085, 0.91653299, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],
         [0.1222415, 0.91653299, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],
         [0.1038085, 0.93800098, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],
         [0.1222415, 0.93800098, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],
         [0.1038085, 0.95946896, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],
         [0.1222415, 0.95946896, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],
         [0.1038085, 0.98093694, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],
         [0.1222415, 0.98093694, 0.0161, 0.021468, 0.0, 0.0, 0, 1.0, 'DIV1A'],       
         [0.1404925, 0.89506501, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'], #DIV1B - 20 elements
         [0.1589255, 0.89506501, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1773585, 0.89506501, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1957915, 0.89506501, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1404925, 0.91653299, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1589255, 0.91653299, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1773585, 0.91653299, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1957915, 0.91653299, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1404925, 0.93800098, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1589255, 0.93800098, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1773585, 0.93800098, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1957915, 0.93800098, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1404925, 0.95946896, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1589255, 0.95946896, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1773585, 0.95946896, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1957915, 0.95946896, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1404925, 0.98093694, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1589255, 0.98093694, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1773585, 0.98093694, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],
         [0.1957915, 0.98093694, 0.0161, 0.021468, 0.0, 0.0, 1, 1.0, 'DIV1B'],       
         [0.2625585, 1.027808, 0.0161, 0.021468, 0.0, 0.0, 2, 1.0, 'DIV2A'], #DIV2A - 6 elements
         [0.2801915, 1.027808, 0.0161, 0.021468, 0.0, 0.0, 2, 1.0, 'DIV2A'],
         [0.2625585, 1.049276, 0.0161, 0.021468, 0.0, 0.0, 2, 1.0, 'DIV2A'],
         [0.2801915, 1.049276, 0.0161, 0.021468, 0.0, 0.0, 2, 1.0, 'DIV2A'],
         [0.2625585, 1.070744, 0.0161, 0.021468, 0.0, 0.0, 2, 1.0, 'DIV2A'],
         [0.2801915, 1.070744, 0.0161, 0.021468, 0.0, 0.0, 2, 1.0, 'DIV2A'],       
         [0.2978245, 1.027808, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'], #DIV2B - 12 elements
         [0.3154575, 1.027808, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.3330905, 1.027808, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.3507235, 1.027808, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.2978245, 1.049276, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.3154575, 1.049276, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.3330905, 1.049276, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.3507235, 1.049276, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.2978245, 1.070744, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.3154575, 1.070744, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.3330905, 1.070744, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],
         [0.3507235, 1.070744, 0.0161, 0.021468, 0.0, 0.0, 3, 1.0, 'DIV2B'],        
         [0.2625585, -1.027808, 0.0161, 0.021468, 0.0, 0.0, 4, 1.0, 'DIV3A'], #DIV3A - 6 elements
         [0.2794595, -1.027808, 0.0161, 0.021468, 0.0, 0.0, 4, 1.0, 'DIV3A'],
         [0.2625585, -1.049276, 0.0161, 0.021468, 0.0, 0.0, 4, 1.0, 'DIV3A'],
         [0.2794595, -1.049276, 0.0161, 0.021468, 0.0, 0.0, 4, 1.0, 'DIV3A'],
         [0.2625585, -1.070744, 0.0161, 0.021468, 0.0, 0.0, 4, 1.0, 'DIV3A'],
         [0.2794595, -1.070744, 0.0161, 0.021468, 0.0, 0.0, 4, 1.0, 'DIV3A'],      
         [0.2999825, -1.027808, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'], #DIV3B - 12 elements
         [0.3168835, -1.027808, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.3337845, -1.027808, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.3506855, -1.027808, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.2999825, -1.049276, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.3168835, -1.049276, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.3337845, -1.049276, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.3506855, -1.049276, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.2999825, -1.070744, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.3168835, -1.070744, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.3337845, -1.070744, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],
         [0.3506855, -1.070744, 0.0161, 0.021468, 0.0, 0.0, 5, 1.0, 'DIV3B'],        
         [0.1038085, -0.89506501, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'], #DIV4A - 10 elements
         [0.1222415, -0.89506501, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],
         [0.1038085, -0.91653299, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],
         [0.1222415, -0.91653299, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],
         [0.1038085, -0.93800098, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],
         [0.1222415, -0.93800098, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],
         [0.1038085, -0.95946896, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],
         [0.1222415, -0.95946896, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],
         [0.1038085, -0.98093694, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],
         [0.1222415, -0.98093694, 0.0161, 0.021468, 0.0, 0.0, 6, 1.0, 'DIV4A'],       
         [0.1404925, -0.89506501, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'], #DIV4B - 20 elements
         [0.1589255, -0.89506501, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1773585, -0.89506501, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1957915, -0.89506501, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1404925, -0.91653299, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1589255, -0.91653299, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1773585, -0.91653299, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1957915, -0.91653299, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1404925, -0.93800098, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1589255, -0.93800098, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1773585, -0.93800098, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1957915, -0.93800098, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1404925, -0.95946896, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1589255, -0.95946896, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1773585, -0.95946896, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1957915, -0.95946896, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1404925, -0.98093694, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1589255, -0.98093694, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1773585, -0.98093694, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],
         [0.1957915, -0.98093694, 0.0161, 0.021468, 0.0, 0.0, 7, 1.0, 'DIV4B'],       
         [0.4406265, 1.067, 0.004953, 0.08255, 0.0, 0.0, 8, 1.0, 'EF1A'], #EF1A - 5 elements
         [0.4458589, 1.067, 0.004953, 0.08255, 0.0, 0.0, 8, 1.0, 'EF1A'],
         [0.4510913, 1.067, 0.004953, 0.08255, 0.0, 0.0, 8, 1.0, 'EF1A'],
         [0.4563237, 1.067, 0.004953, 0.08255, 0.0, 0.0, 8, 1.0, 'EF1A'],
         [0.4615561, 1.067, 0.004953, 0.08255, 0.0, 0.0, 8, 1.0, 'EF1A'],        
         [0.4731385, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'], #EF1B - 9 elements
         [0.4783709, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'],
         [0.4836033, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'],
         [0.4888357, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'],
         [0.4940681, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'],
         [0.4993005, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'],
         [0.5045329, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'],
         [0.5097654, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'],
         [0.5149978, 1.067, 0.004953, 0.08255, 0.0, 0.0, 9, 1.0, 'EF1B'],        
         [0.90007, 1.0807, 0.01905, 0.01905, 0.0, 0.0, 10, 1.0, 'EF2'], #EF2 - 3 elements
         [0.90007, 1.0599999, 0.01905, 0.01905, 0.0, 0.0, 10, 1.0, 'EF2'],
         [0.90007, 1.03943, 0.01905, 0.01905, 0.0, 0.0, 10, 1.0, 'EF2'],       
         [1.14823, 0.77582997, 0.01905, 0.01905, 0.0, 0.0, 11, 1.0, 'EF3'], #EF3 - 5 elements
         [1.14823, 0.75481999, 0.01905, 0.01905, 0.0, 0.0, 11, 1.0, 'EF3'],
         [1.14823, 0.73382002, 0.01905, 0.01905, 0.0, 0.0, 11, 1.0, 'EF3'],
         [1.14823, 0.71280998, 0.01905, 0.01905, 0.0, 0.0, 11, 1.0, 'EF3'],
         [1.14823, 0.69181001, 0.01905, 0.01905, 0.0, 0.0, 11, 1.0, 'EF3'],   
         [1.14823, 0.35124001, 0.01905, 0.01905, 0.0, 0.0, 12, 1.0, 'EF4'], #EF4 - 5 elements
         [1.14823, 0.33059999, 0.01905, 0.01905, 0.0, 0.0, 12, 1.0, 'EF4'],
         [1.14823, 0.30996001, 0.01905, 0.01905, 0.0, 0.0, 12, 1.0, 'EF4'],
         [1.14823, 0.28992999, 0.01905, 0.01905, 0.0, 0.0, 12, 1.0, 'EF4'],
         [1.14823, 0.26868999, 0.01905, 0.01905, 0.0, 0.0, 12, 1.0, 'EF4'],      
         [1.14823, -0.35123, 0.01905, 0.01905, 0.0, 0.0, 13, 1.0, 'EF5'], #EF5 - 5 elements
         [1.14823, -0.33059001, 0.01905, 0.01905, 0.0, 0.0, 13, 1.0, 'EF5'],
         [1.14823, -0.30996001, 0.01905, 0.01905, 0.0, 0.0, 13, 1.0, 'EF5'],
         [1.14823, -0.28992, 0.01905, 0.01905, 0.0, 0.0, 13, 1.0, 'EF5'],
         [1.14823, -0.26868001, 0.01905, 0.01905, 0.0, 0.0, 13, 1.0, 'EF5'],       
         [1.14823, -0.77582997, 0.01905, 0.01905, 0.0, 0.0, 14, 1.0, 'EF6'], #EF6 - 5 elements
         [1.14823, -0.75481999, 0.01905, 0.01905, 0.0, 0.0, 14, 1.0, 'EF6'],
         [1.14823, -0.73382002, 0.01905, 0.01905, 0.0, 0.0, 14, 1.0, 'EF6'],
         [1.14823, -0.71280998, 0.01905, 0.01905, 0.0, 0.0, 14, 1.0, 'EF6'],
         [1.14823, -0.69181001, 0.01905, 0.01905, 0.0, 0.0, 14, 1.0, 'EF6'],        
         [0.90007, -1.0807, 0.01905, 0.01905, 0.0, 0.0, 15, 1.0, 'EF7'], #EF7 - 3 elements
         [0.90007, -1.0599999, 0.01905, 0.01905, 0.0, 0.0, 15, 1.0, 'EF7'],
         [0.90007, -1.03943, 0.01905, 0.01905, 0.0, 0.0, 15, 1.0, 'EF7'],        
         [1.14823, 0.81260997, 0.01445, 0.01445, 0.0, 0.0, 16, 1.0, 'RADIAL'], #RADIAL - NEED TO MAKE SURE TWO HAVE NEGATIVE elements IN TURN FC
         [1.14823, 0.65503001, 0.01445, 0.01445, 0.0, 0.0, 16, 1.0, 'RADIAL'],
         [1.14823, -0.81260997, 0.01445, 0.01445, 0.0, 0.0, 16, -1.0, 'RADIAL'],
         [1.14823, -0.65503001, 0.01445, 0.01445, 0.0, 0.0, 16, -1.0, 'RADIAL'],        
         [1.0423, 0.2776, 0.0786, 0.006, 0.0, 0.0, 17, 1.0, 'WALL1'], #WALL COIL PACK 1 - OUTER WALL UPPER - 9 elements
         [1.00318, 0.05191, 0.00625, 0.10382, 0.0, 0.0, 17, 1.3, 'WALL1'],
         [1.00318, 0.15573, 0.00625, 0.10382, 0.0, 0.0, 17, 1.4, 'WALL1'],
         [1.00318, 0.25955, 0.00625, 0.05191, 0.0, 0.0, 17, 0.79, 'WALL1'],
         [1.00318, 0.31146, 0.00625, 0.05191, 0.0, 0.0, 17, 0.63, 'WALL1'],
         [1.00318, 0.36337, 0.00625, 0.05191, 0.0, 0.0, 17, 0.66, 'WALL1'],
         [1.00318, 0.41528, 0.00625, 0.05191, 0.0, 0.0, 17, 0.7, 'WALL1'],
         [1.00318, 0.46719, 0.00625, 0.05191, 0.0, 0.0, 17, 0.74, 'WALL1'],
         [1.00318, 0.50918001, 0.00625, 0.05191, 0.0, 4.0, 17, 0.78, 'WALL1'],       
         [0.99604702, 0.55118299, 0.00625, 0.0678, 0.0, 9.0, 18, 1.0, 'WALL2'], #WALL COIL PACK 2 - MID UPPER DOME - 7 elements
         [0.96476698, 0.62824702, 0.00625, 0.1, 0.0, 29.0, 18, 1.52, 'WALL2'],
         [0.90642601, 0.70854598, 0.00625, 0.1, 0.0, 43.0, 18, 1.51, 'WALL2'],
         [0.83239502, 0.775204, 0.00625, 0.1, 0.0, 53.0, 18, 1.45, 'WALL2'],
         [0.748945, 0.829916, 0.1, 0.00625, -29.0, 0.0, 18, 1.34, 'WALL2'],
         [0.65957499, 0.87447399, 0.1, 0.00625, -23.0, 0.0, 18, 1.19, 'WALL2'],
         [0.56644601, 0.91069001, 0.1, 0.00625, -19.0, 0.0, 18, 1.02, 'WALL2'],       
         [0.470874, 0.93990898, 0.1, 0.00625, -15.0, 0.0, 19, 1.0, 'WALL3'], #WALL COIL PACK 3 - UPPER UPPER DOME - 10 elements
         [0.37367, 0.96324599, 0.1, 0.00625, -12.0, 0.0, 19, 0.76, 'WALL3'],
         [0.27525, 0.9806, 0.1, 0.00625, 0.0, -8.0, 19, 0.53, 'WALL3'],
         [0.22925, 0.958709, 0.0042, 0.0577, 0.0, 0.0, 19, 0.16, 'WALL3'],
         [0.22925, 0.912121, 0.0042, 0.0577, 0.0, 0.0, 19, 0.16, 'WALL3'],
         [0.22925, 0.86553401, 0.0042, 0.0577, 0.0, 0.0, 19, 0.17, 'WALL3'],
         [0.081428, 0.836, 0.042235, 0.0159, 0.0, 0.0, 19, 0.16, 'WALL3'],
         [0.123663, 0.836, 0.042235, 0.0159, 0.0, 0.0, 19, 0.24, 'WALL3'],
         [0.165898, 0.836, 0.042235, 0.0159, 0.0, 0.0, 19, 0.33, 'WALL3'],
         [0.208133, 0.836, 0.042235, 0.0159, 0.0, 0.0, 19, 0.42, 'WALL3'],   
         [1.0423, -0.2776, 0.0786, 0.006, 0.0, 0.0, 20, 1.0, 'WALL4'], #WALL COIL PACK 4 - OUTER WALL LOWER - 9 elements
         [1.00318, -0.05191, 0.00625, 0.10382, 0.0, 0.0, 20, 1.45, 'WALL4'],
         [1.00318, -0.15573, 0.00625, 0.10382, 0.0, 0.0, 20, 1.48, 'WALL4'],
         [1.00318, -0.25955, 0.00625, 0.05191, 0.0, 0.0, 20, 0.79, 'WALL4'],
         [1.00318, -0.31146, 0.00625, 0.05191, 0.0, 0.0, 20, 0.62, 'WALL4'],
         [1.00318, -0.36337, 0.00625, 0.05191, 0.0, 0.0, 20, 0.64, 'WALL4'],
         [1.00318, -0.41528, 0.00625, 0.05191, 0.0, 0.0, 20, 0.67, 'WALL4'],
         [1.00318, -0.46719, 0.00625, 0.05191, 0.0, 0.0, 20, 0.7, 'WALL4'],
         [1.00318, -0.50918, 0.00625, 0.05191, 0.0, 176.0, 20, 0.73, 'WALL4'],    
         [0.99604702, -0.551183, 0.00625, 0.0678, 0.0, 171.0, 21, 1.0, 'WALL5'], #WALL COIL PACK 5 - MID LOWER DOME - 7 elements
         [0.96476698, -0.628247, 0.00625, 0.1, 0.0, 151.0, 21, 1.51, 'WALL5'],
         [0.90642601, -0.708546, 0.00625, 0.1, 0.0, 137.0, 21, 1.49, 'WALL5'],
         [0.83239502, -0.775204, 0.1, 0.00625, 37.0, 0.0, 21, 1.41, 'WALL5'],
         [0.748945, -0.829916, 0.1, 0.00625, 29.0, 0.0, 21, 1.29, 'WALL5'],
         [0.659575, -0.874474, 0.1, 0.00625, 23.0, 0.0, 21, 1.14, 'WALL5'],
         [0.566446, -0.91069, 0.1, 0.00625, 19.0, 0.0, 21, 0.96, 'WALL5'],
         [0.470874, -0.93990898, 0.1, 0.00625, 15.0, 0.0, 22, 1.0, 'WALL6'], #WALL COIL PACK 6 - LOWER LOWER DOME - 10 elements
         [0.37367, -0.963246, 0.1, 0.00625, 12.0, 0.0, 22, 0.76, 'WALL6'],
         [0.27525, -0.9806, 0.1, 0.00625, 8.0, 0.0, 22, 0.53, 'WALL6'],
         [0.22925, -0.958709, 0.0042, 0.0577, 0.0, 0.0, 22, 0.16, 'WALL6'],
         [0.22925, -0.912121, 0.0042, 0.035475, 0.0, 0.0, 22, 0.1, 'WALL6'],
         [0.22925, -0.865534, 0.0042, 0.0577, 0.0, 0.0, 22, 0.17, 'WALL6'],
         [0.081428, -0.836, 0.042235, 0.0159, 0.0, 0.0, 22, 0.16, 'WALL6'],
         [0.123663, -0.836, 0.042235, 0.0159, 0.0, 0.0, 22, 0.24, 'WALL6'],
         [0.165898, -0.836, 0.042235, 0.0159, 0.0, 0.0, 22, 0.33, 'WALL6'],
         [0.208133, -0.836, 0.042235, 0.0159, 0.0, 0.0, 22, 0.42, 'WALL6'],               
         [0.0603, 0.8, 0.002, 0.1, 0.0, 0.0, 23, 1.0, 'WALL7'], #WALL COIL PACK 7 - CENTER COLUMN & BELLOWS - 17 elements
         [0.0603, 0.7, 0.002, 0.1, 0.0, 0.0, 23, 1.01, 'WALL7'],
         [0.0603, 0.6, 0.002, 0.1, 0.0, 0.0, 23, 1.0, 'WALL7'],
         [0.0603, 0.5, 0.002, 0.1, 0.0, 0.0, 23, 0.95, 'WALL7'],
         [0.0603, 0.4, 0.002, 0.1, 0.0, 0.0, 23, 0.91, 'WALL7'],
         [0.0603, 0.3, 0.002, 0.1, 0.0, 0.0, 23, 0.86, 'WALL7'],
         [0.0603, 0.2, 0.002, 0.1, 0.0, 0.0, 23, 0.83, 'WALL7'],
         [0.0603, 0.1, 0.002, 0.1, 0.0, 0.0, 23, 0.79, 'WALL7'],
         [0.0603, 0.0, 0.002, 0.1, 0.0, 0.0, 23, 0.77, 'WALL7'],
         [0.0603, -0.1, 0.002, 0.1, 0.0, 0.0, 23, 0.76, 'WALL7'],
         [0.0603, -0.2, 0.002, 0.1, 0.0, 0.0, 23, 0.76, 'WALL7'],
         [0.0603, -0.3, 0.002, 0.1, 0.0, 0.0, 23, 0.77, 'WALL7'],
         [0.0603, -0.4, 0.002, 0.1, 0.0, 0.0, 23, 0.78, 'WALL7'],
         [0.0603, -0.5, 0.002, 0.1, 0.0, 0.0, 23, 0.8, 'WALL7'],
         [0.0603, -0.6, 0.002, 0.1, 0.0, 0.0, 23, 0.81, 'WALL7'],
         [0.0603, -0.7, 0.002, 0.1, 0.0, 0.0, 23, 0.81, 'WALL7'],
         [0.0603, -0.8, 0.002, 0.1, 0.0, 0.0, 23, 0.78, 'WALL7'],
         [0.227, 1.14, 0.068, 0.013, 0.0, 0.0, 24, 1.0, 'WALLT1'], # Torque plate #1 - 8 elements
         [0.295, 1.14, 0.068, 0.013, 0.0, 0.0, 24, 1.0, 'WALLT1'],
         [0.363, 1.14, 0.068, 0.013, 0.0, 0.0, 24, 1.0, 'WALLT1'],
         [0.432, 1.14, 0.068, 0.013, 0.0, 0.0, 24, 1.0, 'WALLT1'],
         [0.500, 1.14, 0.068, 0.013, 0.0, 0.0, 24, 1.0, 'WALLT1'],
         [0.568, 1.14, 0.068, 0.013, 0.0, 0.0, 24, 1.0, 'WALLT1'],
         [0.637, 1.14, 0.068, 0.013, 0.0, 0.0, 24, 1.0, 'WALLT1'],
         [0.705, 1.14, 0.068, 0.013, 0.0, 0.0, 24, 1.0, 'WALLT1'],
         [0.227, -1.14, 0.068, 0.013, 0.0, 0.0, 25, 1.0, 'WALLT2'], # Torque plate #2 - 8 elements
         [0.295, -1.14, 0.068, 0.013, 0.0, 0.0, 25, 1.0, 'WALLT2'],
         [0.363, -1.14, 0.068, 0.013, 0.0, 0.0, 25, 1.0, 'WALLT2'],
         [0.432, -1.14, 0.068, 0.013, 0.0, 0.0, 25, 1.0, 'WALLT2'],
         [0.500, -1.14, 0.068, 0.013, 0.0, 0.0, 25, 1.0, 'WALLT2'],
         [0.568, -1.14, 0.068, 0.013, 0.0, 0.0, 25, 1.0, 'WALLT2'],
         [0.637, -1.14, 0.068, 0.013, 0.0, 0.0, 25, 1.0, 'WALLT2'],
         [0.705, -1.14, 0.068, 0.013, 0.0, 0.0, 25, 1.0, 'WALLT2'],
         [0.227, 1.44, 0.068, 0.013, 0.0, 0.0, 26, 1.0, 'WALLT3'], # Torque plate #3 - 8 elements
         [0.295, 1.44, 0.068, 0.013, 0.0, 0.0, 26, 1.0, 'WALLT3'],
         [0.363, 1.44, 0.068, 0.013, 0.0, 0.0, 26, 1.0, 'WALLT3'],
         [0.432, 1.44, 0.068, 0.013, 0.0, 0.0, 26, 1.0, 'WALLT3'],
         [0.500, 1.44, 0.068, 0.013, 0.0, 0.0, 26, 1.0, 'WALLT3'],
         [0.568, 1.44, 0.068, 0.013, 0.0, 0.0, 26, 1.0, 'WALLT3'],
         [0.637, 1.44, 0.068, 0.013, 0.0, 0.0, 26, 1.0, 'WALLT3'],
         [0.705, 1.44, 0.068, 0.013, 0.0, 0.0, 26, 1.0, 'WALLT3'],
         [0.227, -1.44, 0.068, 0.013, 0.0, 0.0, 27, 1.0, 'WALLT4'], # Torque plate #4 - 8 elements
         [0.295, -1.44, 0.068, 0.013, 0.0, 0.0, 27, 1.0, 'WALLT4'],
         [0.363, -1.44, 0.068, 0.013, 0.0, 0.0, 27, 1.0, 'WALLT4'],
         [0.432, -1.44, 0.068, 0.013, 0.0, 0.0, 27, 1.0, 'WALLT4'],
         [0.500, -1.44, 0.068, 0.013, 0.0, 0.0, 27, 1.0, 'WALLT4'],
         [0.568, -1.44, 0.068, 0.013, 0.0, 0.0, 27, 1.0, 'WALLT4'],
         [0.637, -1.44, 0.068, 0.013, 0.0, 0.0, 27, 1.0, 'WALLT4'],
         [0.705, -1.44, 0.068, 0.013, 0.0, 0.0, 27, 1.0, 'WALLT4'],]
         )
    
    count=0
    for coil in fc_dat:
        #check if new coil name, if so, reset element counter
        try:
            if last_coil != coil[8]:
                count=0
        except NameError:
            last_coil = coil[8]
        
        if count == 0: #write coil name for first element and set last coil name
            ods['pf_active']['coil'][coil[6]]['name'] = coil[8]
            ods['pf_active']['coil'][coil[6]]['identifier'] = coil[8]
            last_coil = coil[8]
        
        # assign coil element name and fractional turns
        ename = coil[8]+'_'+str(count)
        ods['pf_active']['coil'][coil[6]]['element'][count]['name'] = ename
        ods['pf_active']['coil'][coil[6]]['element'][count]['identifier'] = ename
        ods['pf_active']['coil'][coil[6]]['element'][count]['turns_with_sign'] = coil[7]
        
        # coil geometric specifications
        if (coil[4] == 0.0 and coil[5] == 0.0): #rectangular coil geometry
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.rectangle.r'] = coil[0]
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.rectangle.z'] = coil[1]
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.rectangle.width'] = coil[2]
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.rectangle.height'] = coil[3]
        else: #oblique coil geometry - parallelogram 
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.oblique.r'] = coil[0]
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.oblique.z'] = coil[1]
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.oblique.length_alpha'] = coil[2]
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.oblique.length_beta'] = coil[3]
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.oblique.alpha'] = coil[4]
            ods['pf_active']['coil'][coil[6]]['element'][count]['geometry.oblique.beta'] = (float(coil[5])-90.0)*pi/180.0
            
        

    
    limiter = np.array([[0.055, 0.66],
                       [0.074, 0.66],
                       [0.122, 0.746],
                       [0.122, 0.8],
                       [0.544, 0.8],
                       [0.547, 0.797],
                       [0.85, 0.494],
                       [0.85, -0.494],
                       [0.547, -0.797],
                       [0.544, -0.8],
                       [0.122, -0.8],
                       [0.122, -0.746],
                       [0.074, -0.66],
                       [0.055, -0.66]])

    
@machine_mapping_function(__regression_arguments__,)
def magnetics_hardware(ods):
    
    # flux loops [RSI, ZSI, SILOP_NAME]
    silop = [[0.0606, 0.696, 'CFL01'],
             [0.0606, 0.6275, 'CFL02'],
             [0.0606, 0.557, 'CFL03'],
             [0.0606, 0.347, 'CFL04'],
             [0.0606, 0.1355, 'CFL05'],
             [0.0606, 0.064, 'CFL06'],
             [0.06058, -0.0025, 'CFL07'],
             [0.06058, -0.0773, 'CFL08'],
             [0.06058, -0.1425, 'CFL09'],
             [0.06058, -0.3508, 'CFL10'],
             [0.0606, -0.5615, 'CFL11'],
             [0.0606, -0.6305, 'CFL12'],
             [0.0606, -0.6995, 'CFL13'],
             [0.2444, 0.8438, 'NCFL01'],
             [0.3415, 0.8435, 'NCFL02'],
             [0.3953, 0.8436, 'NCFL03'],
             [0.4589, 0.8438, 'NCFL04'],
             [0.5229, 0.8431, 'NCFL05'],
             [0.7262, 0.7074, 'NCFL06'],
             [0.7714, 0.6574, 'NCFL07'],
             [0.8191, 0.6074, 'NCFL08'],
             [0.8671, 0.5564, 'NCFL09'],
             [0.9167, 0.5064, 'NCFL10'],
             [0.9168, -0.5116, 'NCFL11'],
             [0.8681, -0.5626, 'NCFL12'],
             [0.8198, -0.6116, 'NCFL13'],
             [0.7715, -0.6646, 'NCFL14'],
             [0.7233, -0.7136, 'NCFL15'],
             [0.5228, -0.8492, 'NCFL16'],
             [0.4598, -0.8485, 'NCFL17'],
             [0.3955, -0.8479, 'NCFL18'],
             [0.3417, -0.8473, 'NCFL19'],
             [0.2432, -0.8473, 'NCFL20'],
             [0.0955, 0.8571, 'WFL01'],
             [0.222, 0.8571, 'WFL02'],
             [0.222, 0.9215, 'WFL03'],
             [0.223, 0.9892, 'WFL04'],
             [0.3925, 0.9016, 'WFL05'],
             [0.737, 0.814, 'WFL06'],
             [0.973, 0.64, 'WFL07'],
             [1.01, 0.277, 'WFL08'],
             [1.01, -0.275, 'WFL09'],
             [0.974, -0.64, 'WFL10'],
             [0.737, -0.84, 'WFL11'],
             [0.3925, -0.9146, 'WFL12'],
             [0.224, -0.9892, 'WFL13'],
             [0.222, -0.9215, 'WFL14'],
             [0.222, -0.8571, 'WFL15'],
             [0.0794, -0.8571, 'WFL16']
        ]
    
    #B-dot probes [R, Z, phi, poloidal angle, name]
    # *****NEED TO FIX phi and POLOIDAL ANGLES********** ACS 3-20-2025
    mprobes = [[0.06755, 0.6945, 0.0, pi/2, 'CPA01'],
               [0.06755, 0.625, 0.0, pi/2, 'CPA02'],
               [0.06755, 0.5555, 0.0, pi/2, 'CPA03'],
               [0.06755, 0.486, 0.0, pi/2, 'CPA04'],
               [0.06755, 0.4163, 0.0, pi/2, 'CPA05'],
               [0.06755, 0.3466, 0.0, pi/2, 'CPA06'],
               [0.06755, 0.277, 0.0, pi/2, 'CPA07'],
               [0.06755, 0.2079, 0.0, pi/2, 'CPA08'],
               [0.06755, 0.1365, 0.0, pi/2, 'CPA09'],
               [0.06755, 0.067, 0.0, pi/2, 'CPA10'],
               [0.06755, -0.0023, 0.0, pi/2, 'CPA11'],
               [0.06755, -0.0725, 0.0, pi/2, 'CPA12'],
               [0.06755, -0.1428, 0.0, pi/2, 'CPA13'],
               [0.06755, -0.2125, 0.0, pi/2, 'CPA14'],
               [0.06755, -0.2815, 0.0, pi/2, 'CPA15'],
               [0.06755, -0.3515, 0.0, pi/2, 'CPA16'],
               [0.06755, -0.4215, 0.0, pi/2, 'CPA17'],
               [0.06755, -0.492, 0.0, pi/2, 'CPA18'],
               [0.06755, -0.5613, 0.0, pi/2, 'CPA19'],
               [0.06755, -0.6308, 0.0, pi/2, 'CPA20'],
               [0.06755, -0.7, 0.0, pi/2, 'CPA21'],
               [0.0682, -0.28, 0.0, pi/2, 'CTOR1'],
               [0.067, -0.88, 0.0, pi/2, 'CTOR2'],
               [0.0682, -1.04, 0.0, pi/2, 'CTOR3'],
               [0.0677, -0.935, 0.0, pi/2, 'CTOR4'],
               [0.0674, -0.96, 0.0, pi/2, 'CTOR5'],
               [0.067, -0.8, 0.0, pi/2, 'CTOR6'],
               [0.9173, -0.1455, 0.0, pi/2, 'OTOR1'],
               [0.9148, -0.1485, 0.0, pi/2, 'OTOR2'],
               [0.9153, -0.1455, 0.0, pi/2, 'OTOR3'],
               [0.9088, -0.153, 0.0, pi/2, 'OTOR4'],
               [0.9173, -0.1485, 0.0, pi/2, 'OTOR5'],
               [0.9153, -0.147, 0.0, pi/2, 'OTOR6'],
               [0.205, 0.8034, 0.0, 0.0, 'PDX01'],
               [0.3734, 0.8034, 0.0, 0.0, 'PDX02'],
               [0.5471, 0.8034, 0.0, 0.0, 'PDX03'],
               [0.8, 0.6, 0.0, pi/2, 'PDX04'],
               [0.9, 0.35, 0.0, pi/2, 'PDX05'],
               [0.9, 0.2, 0.0, pi/2, 'PDX06'],
               [0.9, 0.0, 0.0, pi/2, 'PDX07'],
               [0.9,-0.2, 0.0, pi/2, 'PDX08'],
               [0.9, -0.35, 0.0, pi/2, 'PDX09'],
               [0.8, -0.6, 0.0, pi/2, 'PDX10'],
               [0.531, -0.803, 0.0, pi, 'PDX11'],
               [0.357, -0.803, 0.0, pi, 'PDX12'],
               [0.189, -0.803, 0.0, pi, 'PDX13']
        ]
    
    for k,fl in enumerate(silop):
        ods['magnetics']['flux_loop'][k]['name'] = fl[2]
        ods['magnetics']['flux_loop'][k]['identifier'] = fl[2]
        ods['magnetics']['flux_loop'][k]['position.0.r'] = fl[0]
        ods['magnetics']['flux_loop'][k]['position.0.z'] = fl[1]
        
    for k,bdot in enumerate(mprobes):
        ods['magnetics']['b_field_pol_probe'][k]['name'] = bdot[4]
        ods['magnetics']['b_field_pol_probe'][k]['identifier'] = bdot[4]
        ods['magnetics']['b_field_pol_probe'][k]['position.r'] = bdot[0]
        ods['magnetics']['b_field_pol_probe'][k]['position.z'] = bdot[1]
        ods['magnetics']['b_field_pol_probe'][k]['position.phi'] = bdot[2]
        ods['magnetics']['b_field_pol_probe'][k]['poloidal_angle'] = bdot[3]
    


# =====================
if __name__ == '__main__':
    test_machine_mapping_functions(__all__, globals(), locals())
